<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Songkc&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/6c8095f369fe745094e7e72f87054027</icon>
  <subtitle>Talk is cheap, show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://songkc.github.io/"/>
  <updated>2019-04-19T03:27:11.046Z</updated>
  <id>https://songkc.github.io/</id>
  
  <author>
    <name>Songkc</name>
    <email>weijia_sysu@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指Offer - 从尾到头打印链表</title>
    <link href="https://songkc.github.io/2019/04/17/%E5%89%91%E6%8C%87Offer-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://songkc.github.io/2019/04/17/剑指Offer-从尾到头打印链表/</id>
    <published>2019-04-16T16:42:17.000Z</published>
    <updated>2019-04-19T03:27:11.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个链表，按链表值从尾到头的顺序返回一个 ArrayList。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="使用-std-stack"><a href="#使用-std-stack" class="headerlink" title="使用 std::stack"></a>使用 std::stack</h3><p>栈是先进后出的一种数据结构，很符合本题要求从尾到头逆序输出，因此可以使用 <strong>std::stack</strong> 先将链表所有的值从头节点到尾节点的顺序压入栈中，然后将栈顶元素推入 <strong>vector</strong> 中再将栈顶元素出栈，重复操作直到栈为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            stk.push(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (stk.empty() != <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="built_in">array</span>.push_back(stk.top());</span><br><span class="line">            stk.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="逆序链表"><a href="#逆序链表" class="headerlink" title="逆序链表"></a>逆序链表</h3><p>在这一题中，可以先将链表逆序，再将逆序的链表的值推入 <strong>vector</strong> 中。对已经构建好的链表而言，逆序链表的关键在于从原链表第二个节点开始将每一个节点的 <strong>next</strong> 指针指向其原链表中的前一节点，原本的头节点的 <strong>next</strong> 指针指向 <strong>nullptr</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, head-&gt;val);</span><br><span class="line">        ListNode *latter = head-&gt;next, *temp = <span class="literal">nullptr</span>;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (latter != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            temp = latter-&gt;next;</span><br><span class="line">            latter-&gt;next = head;</span><br><span class="line">            head = latter;</span><br><span class="line">            latter = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="built_in">array</span>.push_back(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h3><p>递归的思路是：假如当前节点指向的下一节点不为空，则先将下一节点加入 <strong>vector</strong> 中，再将当前节点加入 <strong>vector</strong> 中。故而会一直递归到尾节点，第一个加入 <strong>vector</strong> 的将是尾节点，再一层层往上从而达到逆序将链表节点的值加入到 <strong>vector</strong> 中。</p><p>这里要注意的点是递归函数处，<strong>vector</strong> 必须使用引用传递，否则通过值传递得到的 <strong>vector</strong> 结果将是空的 <strong>vector</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">        recursePushBack(<span class="built_in">array</span>, head);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recursePushBack</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">array</span>, ListNode *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">            recursePushBack(<span class="built_in">array</span>, node-&gt;next);</span><br><span class="line">        <span class="built_in">array</span>.push_back(node-&gt;val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;输入一个链表，按链表值从尾到头的顺序返回一个 ArrayList。&lt;/p&gt;
&lt;h2 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://songkc.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="链表" scheme="https://songkc.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="剑指Offer" scheme="https://songkc.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer - 删除链表中重复的结点</title>
    <link href="https://songkc.github.io/2019/03/24/%E5%89%91%E6%8C%87Offer-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E7%BB%93%E7%82%B9/"/>
    <id>https://songkc.github.io/2019/03/24/剑指Offer-删除链表中重复的结点/</id>
    <published>2019-03-23T18:03:24.000Z</published>
    <updated>2019-03-28T18:38:14.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplication</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="非递归方法"><a href="#非递归方法" class="headerlink" title="非递归方法"></a>非递归方法</h3><p>使用三个指针，分别是指向当前结点的前一结点的指针 <strong>prev</strong>，指向当前结点的指针 <strong>curr</strong>，指向当前结点的后一结点的指针 <strong>latter</strong>，为了让第一个节点也有前一结点，定义一个 <strong>ListNode head</strong> 变量，其 <strong>next</strong> 值指向第一个结点。</p><p>接着从 <strong>curr</strong> 为第一个结点开始遍历，直到 <strong>latter</strong> 为 <strong>nullptr</strong>。</p><ul><li>遍历过程中如果 <strong>curr</strong> 与 <strong>latter</strong> 的值不同，则 <strong>prev, curr, latter</strong> 都往后移一个结点；</li><li>如果遇到 <strong>curr</strong> 和 <strong>latter</strong> 的值相同，就需要再进入一层循环，删除每一个与 <strong>curr</strong> 值相同的 <strong>latter</strong>，并将 <strong>latter</strong> 指向其自身的下一个，直到 <strong>latter</strong> 与 <strong>curr</strong> 的值不同或 <strong>latter</strong> 为 <strong>nullptr</strong> 则第二层循环结束，并将当前的 <strong>curr</strong> 结点也删除，然后 <strong>curr</strong> 指向当前 <strong>latter</strong> 的结点，<strong>prev-&gt;next</strong> 指向 <strong>curr</strong>，如果 <strong>latter</strong> 不为 <strong>nullptr</strong> 则 <strong>latter</strong> 指向当前 <strong>latter</strong> 的下一个结点。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplication</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="literal">nullptr</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">        ListNode head(0), *temp = nullptr;</span><br><span class="line">        head.next = pHead;</span><br><span class="line">        ListNode *prev = &amp;head, *curr = pHead, *latter = pHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (latter != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;val == latter-&gt;val) &#123;</span><br><span class="line">                <span class="keyword">while</span> (latter != <span class="literal">nullptr</span> &amp;&amp; curr-&gt;val == latter-&gt;val) &#123;</span><br><span class="line">                    temp = latter;</span><br><span class="line">                    latter = latter-&gt;next;</span><br><span class="line">                    <span class="keyword">delete</span> temp;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = curr;</span><br><span class="line">                curr = latter;</span><br><span class="line">                prev-&gt;next = curr;</span><br><span class="line">                <span class="keyword">delete</span> temp;</span><br><span class="line">                <span class="keyword">if</span> (latter != <span class="literal">nullptr</span>) latter = latter-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev = curr;</span><br><span class="line">                curr = latter;</span><br><span class="line">                latter = latter-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h3><p>递归的主要思路是：判断当前结点与下一结点的值是否相同，如果不同则当前结点为不重复的一个结点，然后就是从当前结点指向的下一个结点开始找不重复的结点；如果当前结点与下一结点的值相同，那么就需要找到第一个与当前结点不同的结点，然后从这个结点开始再找不重复的结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplication</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (pHead-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">        ListNode *node = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (pHead-&gt;val != pHead-&gt;next-&gt;val) &#123;</span><br><span class="line">            node = pHead;</span><br><span class="line">            node-&gt;next = deleteDuplication(node-&gt;next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ListNode *temp = <span class="literal">nullptr</span>;</span><br><span class="line">            node = pHead-&gt;next;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="literal">nullptr</span> &amp;&amp; pHead-&gt;val == node-&gt;val) &#123;</span><br><span class="line">                temp = node;</span><br><span class="line">                node = node-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">delete</span> pHead;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="comment">// 从第一个与当前结点不同的结点再次开始递归</span></span><br><span class="line">            node = deleteDuplication(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表 1-&amp;gt;2
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://songkc.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="链表" scheme="https://songkc.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="剑指Offer" scheme="https://songkc.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 142. Linked List Cycle II</title>
    <link href="https://songkc.github.io/2019/03/23/LeetCode-142-Linked-List-Cycle-II/"/>
    <id>https://songkc.github.io/2019/03/23/LeetCode-142-Linked-List-Cycle-II/</id>
    <published>2019-03-23T13:28:14.000Z</published>
    <updated>2019-03-29T18:28:18.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p><p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p><p><strong>Note:</strong> Do not modify the linked list.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">-4</span>], pos = <span class="number">1</span></span><br><span class="line">Output: tail connects to node index <span class="number">1</span></span><br><span class="line">Explanation: There is a cycle in the linked <span class="built_in">list</span>, where tail connects to the</span><br><span class="line">second node.</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/23/LeetCode-142-Linked-List-Cycle-II/circularlinkedlist_test1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [<span class="number">1</span>,<span class="number">2</span>], pos = <span class="number">0</span></span><br><span class="line">Output: tail connects to node index <span class="number">0</span></span><br><span class="line">Explanation: There is a cycle in the linked <span class="built_in">list</span>, where tail connects to the</span><br><span class="line">first node.</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/23/LeetCode-142-Linked-List-Cycle-II/circularlinkedlist_test2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [<span class="number">1</span>], pos = <span class="number">-1</span></span><br><span class="line">Output: no cycle</span><br><span class="line">Explanation: There is no cycle in the linked <span class="built_in">list</span>.</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/23/LeetCode-142-Linked-List-Cycle-II/circularlinkedlist_test3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="使用-stl-map"><a href="#使用-stl-map" class="headerlink" title="使用 stl::map"></a>使用 stl::map</h3><p><strong>map&lt;ListNode*, int&gt;</strong> 将 <strong>ListNode*</strong> 与 <strong>ListNode*</strong> 出现的次数进行对应，如果单链表中不存在环则，则遍历到尾结点的 <strong>next</strong> 指向的 <strong>nullptr</strong> 时就会结束遍历，返回 <strong>nullptr</strong>；而如果单链表中存在环，第一个出现次数大于 <strong>1</strong> 的结点即环的入口结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;ListNode*, <span class="keyword">int</span>&gt; lmap;</span><br><span class="line">      ListNode *node = head;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lmap.count(node) &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> (lmap[node] = <span class="number">1</span>);</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用-stl-set"><a href="#使用-stl-set" class="headerlink" title="使用 stl::set"></a>使用 stl::set</h3><p>与使用 stl::map 的思路相似，故不再叙述。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">set</span>&lt;ListNode*&gt; nodeset;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodeset.count(head) &gt; <span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">            nodeset.insert(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><h3 id="使用快慢指针"><a href="#使用快慢指针" class="headerlink" title="使用快慢指针"></a>使用快慢指针</h3><p>设定两个指针，一个慢指针，一个快指针，慢指针一次走的距离是一个结点，而快指针一次走的距离是两个结点，即快指针的速度是慢指针的两倍。</p><p>此时，会出现两种情况：</p><ul><li><p>单链表中不存在环则：快指针往后遍历的过程中，会遍历到 <strong>nullptr</strong> 结点，即单链表中不存在环，最后一个结点指向的是 <strong>nullptr</strong>。</p></li><li><p>单链表中存在环则：由于存在环，则快慢指针最后都会进入环中并在环中一直循环，由于快慢指针存在速度差，只要快慢指针一直在环中循环，最终会在环中的一个结点相遇，相遇时快指针至少在环中循环了一圈。</p><p><img src="/2019/03/23/LeetCode-142-Linked-List-Cycle-II/cycle.png" alt=""></p><ul><li><p>如果这时快指针已经是在环里走了 <strong>1</strong> 圈（对应于非环部分较短的情况）：</p><p>此时快指针走了 <strong>2(x + d) (0 &lt;= d)</strong> 距离，<strong>2(x + d) = x + y + d</strong> ，可得 <strong>x = y - d</strong> ，此时再同时从第一次相遇点和头结点出发，速度都为一个结点每次，最后两指针会在环入口结点处相遇。</p></li><li><p>如果这时快指针已经是在环里走了不止一圈，假设为 <strong>k</strong> 圈：</p><p>此时快指针走了 <strong>2(x + d) (0 &lt;= d)​</strong> 距离，<strong>2(x + d) = x +ky + d​</strong>，可得 <strong>x = ky - d​</strong> ，此时再同时从第一次相遇点和头结点出发，速度都为一个结点每次，最后两指针也会在环入口结点处相遇。</p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">      ListNode *slow = head, *fast = head;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast-&gt;next != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                slow = slow-&gt;next;</span><br><span class="line">                fast = fast-&gt;next-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">      fast = head;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>详细思路参考：<a href="https://www.cnblogs.com/zhuzhenwei918/p/7491892.html" target="_blank" rel="noopener">一个链表中包含环，请找出该链表的环的入口结点</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Given a linked list, return the no
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://songkc.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://songkc.github.io/tags/LeetCode/"/>
    
      <category term="链表" scheme="https://songkc.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer - 链表中环的入口结点</title>
    <link href="https://songkc.github.io/2019/03/23/%E5%89%91%E6%8C%87Offer-%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/"/>
    <id>https://songkc.github.io/2019/03/23/剑指Offer-链表中环的入口结点/</id>
    <published>2019-03-23T10:11:33.000Z</published>
    <updated>2019-03-26T19:20:26.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则返回 <strong>NULL</strong>。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="使用-stl-map"><a href="#使用-stl-map" class="headerlink" title="使用 stl::map"></a>使用 stl::map</h3><p><strong>map&lt;ListNode*, int&gt;</strong> 将 ListNode* 与 ListNode* 出现的次数进行对应，如果单链表中不存在环则，则遍历到尾结点的 <strong>next</strong> 指向的 <strong>nullptr</strong> 时就会结束遍历，返回 <strong>nullptr</strong>；而如果单链表中存在环，第一个出现次数大于 <strong>1</strong> 的结点即环的入口结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// method via stl::map</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;ListNode*, <span class="keyword">int</span>&gt; lmap;</span><br><span class="line">      ListNode *node = pHead;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lmap.count(node) &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> (lmap[node] = <span class="number">1</span>);</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用-stl-set"><a href="#使用-stl-set" class="headerlink" title="使用 stl::set"></a>使用 stl::set</h3><p>与使用 stl::map 的思路相似，故不再叙述。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// method via stl::set</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">set</span>&lt;ListNode*&gt; nodeset;</span><br><span class="line">        <span class="keyword">while</span> (pHead != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodeset.count(pHead) &gt; <span class="number">0</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">            nodeset.insert(pHead);</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用快慢指针"><a href="#使用快慢指针" class="headerlink" title="使用快慢指针"></a>使用快慢指针</h3><p>设定两个指针，一个慢指针，一个快指针，慢指针一次走的距离是一个结点，而快指针一次走的距离是两个结点，即快指针的速度是慢指针的两倍。</p><p>此时，会出现两种情况：</p><ul><li><p>单链表中不存在环则：快指针往后遍历的过程中，会遍历到 <strong>nullptr</strong> 结点，即单链表中不存在环，最后一个结点指向的是 <strong>nullptr</strong>。</p></li><li><p>单链表中存在环则：由于存在环，则快慢指针最后都会进入环中并在环中一直循环，由于快慢指针存在速度差，只要快慢指针一直在环中循环，最终会在环中的一个结点相遇，相遇时快指针至少在环中循环了一圈。</p><p><img src="/2019/03/23/剑指Offer-链表中环的入口结点/cycle.png" alt=""></p><ul><li><p>如果这时快指针已经是在环里走了 <strong>1</strong> 圈（对应于非环部分较短的情况）：</p><p>此时快指针走了 <strong>2(x + d) (0 &lt;= d)</strong> 距离，<strong>2(x + d) = x + y + d</strong> ，可得 <strong>x = y - d</strong> ，此时再同时从第一次相遇点和头结点出发，速度都为一个结点每次，最后两指针会在环入口结点处相遇。</p></li><li><p>如果这时快指针已经是在环里走了不止一圈，假设为 <strong>k</strong> 圈：</p><p>此时快指针走了 <strong>2(x + d) (0 &lt;= d)​</strong> 距离，<strong>2(x + d) = x +ky + d​</strong>，可得 <strong>x = ky - d​</strong> ，此时再同时从第一次相遇点和头结点出发，速度都为一个结点每次，最后两指针也会在环入口结点处相遇。</p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// method via fast pointer and slow pointer</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (pHead == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">      ListNode *slow = pHead, *fast = pHead;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast-&gt;next != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                slow = slow-&gt;next;</span><br><span class="line">                fast = fast-&gt;next-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">      fast = pHead;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>详细思路参考：<a href="https://www.cnblogs.com/zhuzhenwei918/p/7491892.html" target="_blank" rel="noopener">一个链表中包含环，请找出该链表的环的入口结点</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给一个链表，若其中包含环，请找出该链表的环的入口结点，否则返回 &lt;strong&gt;NULL&lt;/strong&gt;。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://songkc.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="链表" scheme="https://songkc.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="剑指Offer" scheme="https://songkc.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer - 二叉树的镜像</title>
    <link href="https://songkc.github.io/2019/03/22/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://songkc.github.io/2019/03/22/剑指Offer-二叉树的镜像/</id>
    <published>2019-03-22T03:19:58.000Z</published>
    <updated>2019-03-26T19:07:39.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">二叉树的镜像定义：</span><br><span class="line">             源二叉树                    镜像二叉树</span><br><span class="line">                8                          8 </span><br><span class="line">               /  \                       /  \</span><br><span class="line">              6   10                     10   6</span><br><span class="line">             / \  / \                   / \  / \</span><br><span class="line">            5  7  9 11                 11  9 7  5</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode *pRoot)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h3><p>对于每个二叉树结点都将左右子结点交换就可以，因此递归是最简短的形式，可以先继续递归左右子结点再交换左右子结点，也可以先交换左右子结点再继续递归左右子结点。</p><p>继续递归左右子结点时，可以先检查左右子结点是否为 <strong>nullptr</strong>，如果子结点是 <strong>nullptr</strong>，则不需要进行递归，可以减少内存空间和运行时间的消耗，因为递归需要为递归函数的参数和局部变量分配内存空间，同时还需要对递归函数进行压栈操作和递归函数执行及执行完后的出栈操作，这些都需要消耗时间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode *pRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (pRoot-&gt;left  != <span class="literal">nullptr</span>) Mirror(pRoot-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (pRoot-&gt;right != <span class="literal">nullptr</span>) Mirror(pRoot-&gt;right);</span><br><span class="line">        TreeNode* temp = pRoot-&gt;left;</span><br><span class="line">        pRoot-&gt;left = pRoot-&gt;right;</span><br><span class="line">        pRoot-&gt;right = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="stl-queue-非递归方法"><a href="#stl-queue-非递归方法" class="headerlink" title="stl::queue 非递归方法"></a>stl::queue 非递归方法</h3><p>通过队列以层次遍历的方式，遍历每一个二叉树结点，取出结点将左右子结点交换，再将非 <strong>nullptr</strong> 的子结点加入队列中，直到队列为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode *pRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; que;</span><br><span class="line">        que.push(pRoot);</span><br><span class="line">        TreeNode *node = <span class="literal">nullptr</span>, *temp = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (que.empty() == <span class="literal">false</span>) &#123;</span><br><span class="line">            node = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            temp = node-&gt;left;</span><br><span class="line">            node-&gt;left = node-&gt;right;</span><br><span class="line">            node-&gt;right = temp;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left  != <span class="literal">nullptr</span>) que.push(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right != <span class="literal">nullptr</span>) que.push(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="stl-stack-非递归方法"><a href="#stl-stack-非递归方法" class="headerlink" title="stl::stack 非递归方法"></a>stl::stack 非递归方法</h3><p>与 stl::queue 的思路相似，故不再叙述。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode *pRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; stk;</span><br><span class="line">        stk.push(pRoot);</span><br><span class="line">        TreeNode *node = <span class="literal">nullptr</span>, *temp = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (stk.empty() == <span class="literal">false</span>) &#123;</span><br><span class="line">            node = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            temp = node-&gt;left;</span><br><span class="line">            node-&gt;left = node-&gt;right;</span><br><span class="line">            node-&gt;right = temp;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left  != <span class="literal">nullptr</span>) stk.push(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right != <span class="literal">nullptr</span>) stk.push(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;操作给定的二叉树，将其变换为源二叉树的镜像。&lt;/p&gt;
&lt;h2 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://songkc.github.io/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="二叉树" scheme="https://songkc.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="剑指Offer" scheme="https://songkc.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>I/O 多路复用：select、poll 和 epoll</title>
    <link href="https://songkc.github.io/2019/03/02/I-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%EF%BC%9Aselect%E3%80%81poll%E5%92%8Cepoll/"/>
    <id>https://songkc.github.io/2019/03/02/I-O多路复用：select、poll和epoll/</id>
    <published>2019-03-01T17:03:44.000Z</published>
    <updated>2019-04-09T10:02:55.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-O-多路复用"><a href="#I-O-多路复用" class="headerlink" title="I/O 多路复用"></a>I/O 多路复用</h2><p>I/O 多路复用实际上就是用 <strong>select, poll, epoll</strong> 监听多个 I/O 对象，当 I/O 对象有变化（有数据）的时候就通知用户进程。好处就是单个进程可以处理多个 Socket。I/O 多路复用的流程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/02/I-O多路复用：select、poll和epoll/multiplexing.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>当用户进程调用了 select，那么整个进程会被阻塞</strong>，而同时，内核会“监视” select 负责的文件描述符集合，当集合中任何一个的数据准备好了，select 就会返回。这个时候用户进程再调用 read 操作，将数据从内核空间拷贝到用户进程。</p><p>所以，I/O 多路复用的特点是通过一种机制使得一个进程或一个线程能同时等待多个文件描述符的 I/O 操作，而这些文件描述符其中的任意一个进入读就绪状态，select() 函数就可以返回。这样，多个描述符的 I/O 操作都能在一个进程或线程内并发交替地顺序完成，这就叫 I/O 多路复用，这里的“复用”指的是复用同一个进程或线程。</p><h3 id="select、poll-和-epoll-概述"><a href="#select、poll-和-epoll-概述" class="headerlink" title="select、poll 和 epoll 概述"></a>select、poll 和 epoll 概述</h3><p>select，poll，epoll 都是 I/O 多路复用的机制。I/O 多路复用就是通过一种机制，可以监视多个描述符，一旦某个文件描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作，也就是说它们的职责不是进行 I/O 操作，而是帮助调用者寻找当前就绪的设备。<strong>但 select，poll，epoll 本质上都是同步 I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的</strong>，而异步 I/O 则无需自己负责进行读写，异步 I/O 的实现会负责把数据从内核拷贝到用户空间。</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><h3 id="select-介绍"><a href="#select-介绍" class="headerlink" title="select 介绍"></a>select 介绍</h3><p>select 函数在一段指定时间内，监听用户感兴趣的一组支持非阻塞的 I/O 文件描述符上的可读、可写和异常事件，直至某一个文件描述符触发了事件或者超过了指定的等待时间。select 能够监视的文件描述符的数量存在最大限制，通常是 1024。</p><h3 id="select-接口"><a href="#select-接口" class="headerlink" title="select 接口"></a>select 接口</h3><p>函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：正常工作返回就绪描述符的数目，超时返回0，出错返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, <span class="keyword">const</span> struct timeval *timeout)</span></span></span><br></pre></td></tr></table></figure><p>函数参数介绍如下：</p><ul><li><p>第一个参数 <strong>maxfdp1</strong> 指定待测试的文件描述符个数，它的值是待测试的最大文件描述符加 1（因此把该参数命名为 maxfdp1），文件描述字 0、1、2 … maxfdp1-2、maxfdp1-1 均将被测试（因为文件描述符是从0开始的）。</p></li><li><p>中间的三个参数 readset、writeset 和 exceptset 是指定我们要让内核测试读、写和异常条件的文件描述符的集合。如果并不需要监听某一个，就可以把它设为空指针。</p><p><strong>struct fd_set</strong> 结构体是文件描述符集，该结构体实际上是一个整型数组，数组中的每个元素的每一位标记一个文件描述符。fd_set 能容纳的文件描述符数量由 FD_SETSIZE 指定，一般情况下，FD_SETSIZ E等于1024，这就限制了 select 能同时处理的文件描述符的总量。struct fd_set 可通过以下四个函数进行操作：</p><ul><li>void FD_ZERO(fd_set *fdset);           // 清空集合</li><li>void FD_SET(int fd, fd_set *fdset);   // 将一个给定的文件描述符加入集合之中</li><li>void FD_CLR(int fd, fd_set *fdset);   // 将一个给定的文件描述符从集合中删除</li><li>int FD_ISSET(int fd, fd_set *fdset);   // 检查集合中指定的文件描述符是否可以读写 </li></ul></li><li><p>timeout 则是告知内核等待所指定描述字中的任何一个就绪可花多少时间。<strong>struct timeval</strong> 结构用于指定这段时间的秒数和微秒数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> tv_sec;   <span class="comment">//seconds</span></span><br><span class="line">    <span class="keyword">long</span> tv_usec;  <span class="comment">//microseconds</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个参数有三种可能：</p><ul><li>永远等待下去：仅在有一个文件描述符准备好 I/O 时才返回。只要将该参数设置为空指针 NULL。</li><li>等待一段固定时间：在有一个描述字准备好 I/O 时返回，但是不超过由该参数所指向的 <strong>struct timeval</strong> 结构中指定的秒数和微秒数。</li><li>根本不等待：检查文件描述符后立即返回，这称为轮询。为此，该参数必须指向一个 <strong> struct timeval</strong> 结构，而且其中的定时器值必须为 0。</li></ul></li></ul><h3 id="select-总结"><a href="#select-总结" class="headerlink" title="select 总结"></a>select 总结</h3><p>select 创建了 3 个文件描述符集合（fd_set）并拷贝到内核中，分别监听读、写、异常事件。select 可以监听的文件描述符数量受到单个进程所能打开的文件描述符的限制，默认为 1024，采用轮询方式遍历所有的文件描述符，最后返回一个文件描述符是否就绪的 mask 掩码，并根据 mask 掩码给 fd_set 赋值。将之前的 fd_set 拷贝传出到用户态并返回就绪的文件描述符的总个数。用户态并不知道是哪些文件描述符处于就绪态，需要遍历来判断。应用程序索引就绪文件描述符的时间复杂度是 O(n)。再次调用 select 时，需要将新的 fd_set 监听文件描述符集合再次拷贝传入内核同时 select 只能工作在效率相对较低的 LT 模式下。</p><h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><h3 id="poll-介绍"><a href="#poll-介绍" class="headerlink" title="poll 介绍"></a>poll 介绍</h3><p>poll 的机制与 select 类似，与 select 在本质上没有太大差别，同时管理多个文件描述符也是进行轮询，根据描述符的状态进行处理，但是 poll 相比 select 没有最大文件描述符数量的限制。但 poll 和 select 同样存在一个缺点就是，包含大量文件描述符的数组被整体复制于用户态和内核态的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。</p><h3 id="poll-接口"><a href="#poll-接口" class="headerlink" title="poll 接口"></a>poll 接口</h3><p>函数格式如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：正常工作返回就绪描述符的数目，超时返回0，出错返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure><p>函数参数介绍如下：</p><ul><li><p>第一个参数 fds 是指向一个结构体数组的第一个元素的指针，每个元素都是一个 <strong>struct pollfd</strong> 结构，用于指定测试某个给定描述符的条件。</p><p>每一个 <strong>struct pollfd</strong> 结构体指定一个被监视的文件描述符，每个结构体的 events 域是监视该文件描述符的事件类型，由用户来设置这个域。revents 域是文件描述符的操作结果事件类型，内核在调用返回时设置这个域。events 域中请求的任何事件类型都可能在 revents 域中返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd;             <span class="comment">/* 文件描述符 */</span></span><br><span class="line">    <span class="keyword">short</span> events;       <span class="comment">/* 等待的事件 */</span></span><br><span class="line">    <span class="keyword">short</span> revents;      <span class="comment">/* 实际发生了的事件 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>poll 的事件类型：</p><p><img src="/2019/03/02/I-O多路复用：select、poll和epoll/poll.png" alt=""></p></li><li><p>第二个参数 nfds 是要监听的文件描述符的个数，也就是数组 fds 的元素个数。</p></li><li><p>第三个参数 timeout 意义与 select 相同。timeout 参数指定等待的毫秒数，无论 I/O 是否准备好，poll 都会返回。timeout 指定为负数值表示无限等待，使 poll 一直挂起直到一个指定事件发生；timeout 为 0 指示 poll 调用立即返回并列出准备好 I/O 的文件描述符，但并不等待其它的事件。这种情况下，poll 就像它的名字那样，一旦选举出来，立即返回。</p></li></ul><h3 id="poll-总结"><a href="#poll-总结" class="headerlink" title="poll 总结"></a>poll 总结</h3><p>使用 poll 和 select 不一样，你不需要显式地请求异常情况报告。POLLIN | POLLPRI 等价于 select 的读事件，POLLOUT |POLLWRBAND 等价于 select 的写事件。POLLIN 等价于 POLLRDNORM |POLLRDBAND，而POLLOUT 则等价于 POLLWRNORM。例如，要同时监视一个文件描述符是否可读和可写，我们可以设置 events 为 POLLIN |POLLOUT。在 poll 返回时，我们可以检查 revents 中的标志，对应于文件描述符请求的 events 结构体。如果 POLLIN 事件被设置，则文件描述符可以被读取而不阻塞。如果 POLLOUT 被设置，则文件描述符可以写入而不导致阻塞。这些标志并不是互斥的：它们可能被同时设置，表示这个文件描述符的读取和写入操作都会正常返回而不阻塞。</p><p>poll 将 struct pollfd 结构体数组拷贝到内核中进行监听。poll 采用链表 poll_list 来进行文件描述符的存储，因此poll 可以监听的文件描述符数量为系统可以打开的最大文件描述符数（65535）。与 select 一样采用轮询方式，查询每个文件描述符上的事件状态，如果就绪，内核就修改文件描述符对应的 revents 的值，而 events 成员保持不变，因此下次调用 poll 时，应用程序无需重置 pollfd 类型的事件集参数。将之前传入的 struct pollfd 结构体数组拷贝传出到用户态，并返回就绪文件描述符的总个数。用户态并不知道是哪些文件描述符处于就绪态，需要遍历来判读。应用程序索引就绪文件描述符的时间复杂度是 O(n)。同样，poll 也只能工作在效率相对较低的 LT 模式下。</p><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><h3 id="epoll-介绍"><a href="#epoll-介绍" class="headerlink" title="epoll 介绍"></a>epoll 介绍</h3><p>epoll 是在 Linux 2.6 内核中提出的，是之前的 select 和 poll 的增强版本。相对于 select 和 poll 来说，epoll 在使用和实现上区别很大。首先，epoll 使用一组函数来完成，而不是单独的一个函数；其次，epoll 把用户关心的文件描述符上的事件放在内核里的一个事件表中，无须像 select 和 poll 那样每次调用都要重复传入文件描述符集合事件集，这样在用户空间和内核空间的复制只需一次。</p><h3 id="epoll-接口"><a href="#epoll-接口" class="headerlink" title="epoll 接口"></a>epoll 接口</h3><p>epoll 操作过程需要三个接口，分别如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用成功返回一个文件描述符，失败返回-1并设置errno。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用成功返回0，调用失败返回-1并设置errno。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用成功返回就绪文件描述符个数，失败返回-1并设置errno。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure><p>三个函数介绍如下：</p><ul><li><p><strong>int epoll_create(int size)：</strong>创建一个 epoll 的文件描述符，size 用来告诉内核需要监听的数目一共有多少。这个参数不同于 select 中的第一个参数，给出最大监听的 fd+1 的值。需要注意的是，当创建好 epoll 文件描述符后，它就是会占用一个 fd 值，在 Linux 下如果查看 /proc/进程id/fd/，是能够看到这个 fd 的，所以在使用完 epoll 后，必须调用 close() 关闭，否则可能导致文件描述符被耗尽。</p></li><li><p><strong>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)：</strong>epoll 的事件注册函数，在使用epoll_ctl 时，是把 fd 添加、修改到内核事件表中，或从内核事件表中删除 fd 的事件。它与 select 不同是在并非监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create() 的返回值，第二个参数表示需要进行的动作，用三个宏来表示：</p><ul><li>EPOLL_CTL_ADD：往事件表中注册新的 fd 事件到 epfd 中；</li><li>EPOLL_CTL_MOD：修改已经注册的 fd 上的监听事件；</li><li>EPOLL_CTL_DEL：从 epfd 中删除一个 fd 注册的事件；</li></ul><p>第三个参数是需要监听的 fd，第四个参数是告诉内核需要监听什么事件类型，<strong>struct epoll_event</strong> 结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 感兴趣的事件和被触发的事件</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">__uint32_t</span> events;  <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="keyword">epoll_data_t</span> data;  <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存触发事件的某个文件描述符相关的数据（与具体使用方式有关）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data &#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    <span class="keyword">int</span>  fd;</span><br><span class="line">    <span class="keyword">uint32_t</span> u32;</span><br><span class="line">    <span class="keyword">uint64_t</span> u64;</span><br><span class="line">&#125; epoll_data;</span><br></pre></td></tr></table></figure><p>events 可以是以下几个宏的集合：</p><ul><li>EPOLLIN ：表示对应的文件描述符可以读；</li><li>EPOLLOUT：表示对应的文件描述符可以写；</li><li>EPOLLPRI：表示对应的文件描述符有紧急的数据可读；</li><li>EPOLLERR：表示对应的文件描述符发生错误；</li><li>EPOLLHUP：表示对应的文件描述符被挂断；</li><li>EPOLLET： 将 epoll 设为边缘触发（Edge Triggered）模式，这是相对于水平触发（Level Triggered）来说的；</li><li>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个文件描述符的话，需要再次把这个文件描述符加入到 epoll 队列里。</li></ul></li><li><p><strong>int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)：</strong>在一段时间内等待一组文件描述符上的事件发生，类似于 select 调用。参数 events 是一个传出型参数，epoll_wait 函数如果检测到事件就绪，就将所有就绪的事件从内核事件表（epfd 所指的文件）中复制到 events 指定的数组中，这个数组用来输出 epoll_wait 检测到的就绪事件，而不像 select 与 poll 那样，这也是 epoll 与前者最大的区别。maxevents 告诉内核这个需要监听的事件表 events 有多大，这个 maxevents 的值不能大于创建 epoll_create() 时的 size，参数 timeout 是超时时间（单位毫秒，0 会立即返回，-1 时调用将永远阻塞，直到某个事件发生）。该函数返回需要处理的事件数目，如返回 0 表示已超时。</p></li></ul><h3 id="LT-和-ET-模式"><a href="#LT-和-ET-模式" class="headerlink" title="LT 和 ET 模式"></a>LT 和 ET 模式</h3><p>epoll 对文件描述符的操作有两种模式：LT（level trigger）和ET（edge trigger）。LT 模式是默认模式，LT 模式与 ET 模式的区别如下：</p><ul><li><strong>LT 模式：</strong>当 epoll_wait 检测到文件描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用 epoll_wait 时，会再次响应应用程序并通知此事件。</li><li><strong>ET 模式：</strong>当 epoll_wait 检测到文件描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用 epoll_wait 时，不会再次响应应用程序并通知此事件。</li></ul><p>LT（level triggered）是缺省的工作方式，并且同时支持阻塞和非阻塞。在这种做法中，内核通知进程一个文件描述符是否就绪了，然后进程可以对这个就绪的文件描述符进行 I/O 操作。如果不作任何操作，下一次内核还是会继续通知你的。</p><p>ET（edge triggered）是高速工作方式，只支持非阻塞。在这种模式下，当描述符从未就绪变为就绪时，内核通过 epoll 通知进程。然后它会假设进程知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到进程进行了某些操作导致那个文件描述符不再为就绪状态了。但是请注意，如果一直不对这个文件描述符进行 I/O 操作从而导致它再次变成未就绪，内核是不会发送更多的通知（only once）。</p><p><strong>ET 模式在很大程度上减少了使用 epoll 时文件描述符事件被重复触发的次数，因此效率要比 LT 模式高。</strong>在网络编程中，epoll 工作在 ET 模式的时候，必须使用非阻塞套接口，以避免由于一个文件描述符的阻塞读或阻塞写操作把处理多个文件描述符的任务饿死。</p><h3 id="epoll-总结"><a href="#epoll-总结" class="headerlink" title="epoll 总结"></a>epoll 总结</h3><p>epoll 执行 epoll_create() 函数时会在内核创建一颗红黑树 rb_node 以及就绪链表 rdllist (存放已经就绪的文件描述符)，可以监听的文件描述符数量可以达到系统可以打开的最大文件描述符数（65535）。接着用户执行的epoll_ctl() 函数将 epoll_event 结构体拷贝传入内核，内核会在红黑树上添加相应的结点，并注册回调函数 ep_poll_callback()，内核在检测到某文件描述符可读或可写时就调用回调函数 callback，该回调函数将文件描述符放入就绪链表 rdllist 中。epoll_wait() 函数只需要观察 rdllist 中有无就绪的文件描述符即可，内核将就绪的文件描述符事件复制到传入的 epoll_event 结构体数组中返回给用户空间，所以用户只用直接遍历数组依次处理即可，即应用程序索引就绪文件描述符的时间复杂度是 O(1)。这里返回的文件描述符是通过内存映射（mmap）技术让内核和用户空间共享同一块内存传递的，减少了不必要的拷贝。再次调用 epoll 系统调用，不用重建红黑树，直接沿用已经存在的即可。epoll 支持ET模式，当内核将该事件通知给用户后，用户必须立即处理，这样就减少了可读、可写和异常事件被触发的次数。</p><p>详细的关于 select、poll 和 epoll 的比较会在下次分析。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>IO多路复用之select总结：<a href="https://www.cnblogs.com/Anker/p/3258674.html" target="_blank" rel="noopener">https://www.cnblogs.com/Anker/p/3258674.html</a></li><li>IO多路复用之poll总结：<a href="https://www.cnblogs.com/Anker/p/3261006.html" target="_blank" rel="noopener">https://www.cnblogs.com/Anker/p/3261006.html</a></li><li>IO多路复用之epoll总结：<a href="https://www.cnblogs.com/Anker/p/3263780.html" target="_blank" rel="noopener">https://www.cnblogs.com/Anker/p/3263780.html</a></li><li>Linux IO模式及 select、poll、epoll详解：<a href="https://segmentfault.com/a/1190000003063859" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003063859</a></li><li>为什么epoll比select和poll更高效：<a href="https://blog.csdn.net/qq_36953135/article/details/77823893" target="_blank" rel="noopener">https://blog.csdn.net/qq_36953135/article/details/77823893</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-O-多路复用&quot;&gt;&lt;a href=&quot;#I-O-多路复用&quot; class=&quot;headerlink&quot; title=&quot;I/O 多路复用&quot;&gt;&lt;/a&gt;I/O 多路复用&lt;/h2&gt;&lt;p&gt;I/O 多路复用实际上就是用 &lt;strong&gt;select, poll, epoll&lt;/st
      
    
    </summary>
    
      <category term="I/O" scheme="https://songkc.github.io/categories/I-O/"/>
    
    
      <category term="I/O" scheme="https://songkc.github.io/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>C++11 - 线程池</title>
    <link href="https://songkc.github.io/2019/02/27/C++11-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://songkc.github.io/2019/02/27/C++11-线程池/</id>
    <published>2019-02-26T17:47:39.000Z</published>
    <updated>2019-05-19T11:38:57.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是线程池？"><a href="#什么是线程池？" class="headerlink" title="什么是线程池？"></a>什么是线程池？</h2><p>传统多线程方案中采用的服务器模型是一旦接受到请求之后，即创建一个新的线程，由该线程执行任务。任务执行完毕后，线程退出，这就是是“<strong>即时创建，即时销毁</strong>”的策略。尽管与创建进程相比，创建线程的时间已经大大的缩短，但是如果提交给线程的任务是执行时间较短，而且执行次数极其频繁，那么服务器将处于不停的创建线程，销毁线程的状态。</p><p>线程池则是一种采用<strong>预创建技术</strong>的多线程处理形式，在程序启动之初就创建一定数量线程，运行过程中将任务添加到队列，然后再将任务分配给已创建好的线程中自动启动这些任务。因为程序边运行边创建线程是比较耗时的，所以我们通过池化的思想，减少创建线程和销毁线程对程序资源的消耗。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。</p><h2 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h2><p>线程池采用预创建的技术，在程序启动之后，将立即创建一定数量的线程（N1），放入空闲队列中。这些线程都是处于阻塞状态，不消耗 CPU，但占用较小的内存空间。当任务到来后，缓冲池选择一个空闲线程，把任务传入此线程中执行。当 N1 个线程都在处理任务后，缓冲池自动创建一定数量的新线程，用于处理更多的任务。在任务执行完毕后线程也不退出，而是继续保持在池中等待下一次的任务。当系统比较空闲时，大部分线程都一直处于暂停状态，线程池自动销毁一部分线程，回收系统资源。</p><p>使用线程完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。</p><p>线程池技术正是关注如何缩短或调整 T1，T3 时间的技术，从而提高服务器程序性能的。它把 T1，T3 分别安排在程序的启动和结束的时间段或者一些空闲的时间段，这样在程序处理多个任务时，就不会有 T1，T3 的开销了。同时，线程池不仅调整 T1 和 T3 产生的时间段，而且它还显著减少了创建线程的数目。</p><h2 id="线程池适合场景"><a href="#线程池适合场景" class="headerlink" title="线程池适合场景"></a>线程池适合场景</h2><p>事实上，线程池并不是万能的。它有其特定的使用场合。线程池致力于减少线程本身的开销对应用所产生的影响，这是有前提的，前提就是线程本身开销与线程执行任务相比不可忽略。如果线程本身的开销相对于线程任务执行开销而言是可以忽略不计的，那么此时线程池所带来的好处是不明显的，比如对于FTP服务器以及Telnet服务器，通常传送文件的时间较长，开销较大，那么此时，我们采用线程池未必是理想的方法，我们可以选择“即时创建，即时销毁”的策略。</p><p>总之线程池通常适合下面的几个场合：</p><ol><li><strong>单位时间内处理任务频繁而且任务处理时间短。</strong></li><li><strong>对实时性要求较高。如果接受到任务后在创建线程，可能满足不了实时要求，因此必须采用线程池进行预创建。</strong></li></ol><h2 id="线程池的组成部分"><a href="#线程池的组成部分" class="headerlink" title="线程池的组成部分"></a>线程池的组成部分</h2><ul><li>线程池管理器（ThreadPoolManager）：用于创建并管理线程</li><li>工作线程（WorkThread）：线程池中的线程</li><li>任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行</li><li>任务队列（TaskQueue）：用于存放没有处理的任务</li></ul><h2 id="线程池实现原理"><a href="#线程池实现原理" class="headerlink" title="线程池实现原理"></a>线程池实现原理</h2><p>线程池管理一个任务队列，一个线程队列，然后每次取一个任务分配给一个线程去做，循环往复。而线程池一般要复用线程，所以如果是取一个 task 分配给某一个 thread，执行完之后再重新分配，在语言层面上基本都是不支持的：一般语言的 thread 都是执行一个固定的 task 函数，执行完毕线程也就结束了，因此要如何实现 task 和 thread 的分配呢？</p><p>思路就是：<strong>让每一个 thread 都去执行调度函数：循环获取一个 task，然后执行之。保证了 thread 函数的唯一性，而且复用线程执行 task。</strong></p><h2 id="线程池实现"><a href="#线程池实现" class="headerlink" title="线程池实现"></a>线程池实现</h2><h3 id="线程池代码"><a href="#线程池代码" class="headerlink" title="线程池代码"></a>线程池代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _THREADPOOL_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _THREADPOOL_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// constructor</span></span><br><span class="line">        ThreadPool(<span class="keyword">size_t</span> threadnum = <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// deconstructor</span></span><br><span class="line">        ~ThreadPool();</span><br><span class="line">        <span class="comment">// add task</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">// the work threads</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; workers_;</span><br><span class="line">        <span class="comment">// the task queue</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt;&gt; tasks_;</span><br><span class="line">        <span class="comment">// the task queue lock</span></span><br><span class="line">        <span class="built_in">std</span>::mutex mutex_;</span><br><span class="line">        <span class="comment">// condition variable</span></span><br><span class="line">        <span class="built_in">std</span>::condition_variable condition_;</span><br><span class="line">        <span class="comment">// constrol thread pool</span></span><br><span class="line">        <span class="keyword">bool</span> stop_;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the constructor just launches some amount of workers</span></span><br><span class="line"><span class="keyword">inline</span> ThreadPool::ThreadPool(<span class="keyword">size_t</span> threadnum) : stop_(<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; threadnum; ++i) &#123;</span><br><span class="line">        workers_.emplace_back( [<span class="keyword">this</span>]&#123;  <span class="comment">// 为每个线程构造一个调度函数</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; task;</span><br><span class="line">                &#123;   <span class="comment">// 此处花括号使得在执行 task 前即释放互斥锁</span></span><br><span class="line">                    <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(<span class="keyword">this</span>-&gt;mutex_);</span><br><span class="line">                    <span class="comment">// stop_ 为 false 且 task queue 为空时阻塞线程，其他情况都不阻塞</span></span><br><span class="line">                    <span class="keyword">this</span>-&gt;condition_.wait(lock, [<span class="keyword">this</span>]&#123;</span><br><span class="line">                        <span class="keyword">return</span> (<span class="keyword">this</span>-&gt;stop_ || !<span class="keyword">this</span>-&gt;tasks_.empty()); &#125;);</span><br><span class="line">                    <span class="comment">// 线程结束，用于销毁线程</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;stop_ &amp;&amp; <span class="keyword">this</span>-&gt;tasks_.empty())</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;tasks_.empty() == <span class="literal">false</span>) &#123;</span><br><span class="line">                        task = <span class="built_in">std</span>::move(<span class="keyword">this</span>-&gt;tasks_.front());</span><br><span class="line">                        <span class="keyword">this</span>-&gt;tasks_.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                task();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the destructor joins all threads</span></span><br><span class="line"><span class="keyword">inline</span> ThreadPool::~ThreadPool() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对于所有线程共享的变量操作前都需要加锁</span></span><br><span class="line">        <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(mutex_);</span><br><span class="line">        stop_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 唤醒所有阻塞的线程</span></span><br><span class="line">    condition_.notify_all();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::thread &amp;worker : workers_) &#123;</span><br><span class="line">        <span class="comment">// 等待所有线程都执行完</span></span><br><span class="line">        worker.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add new task to the task queue</span></span><br><span class="line"><span class="keyword">bool</span> ThreadPool::EnQueue(<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; task) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对于 task queue 的操作都需要加锁，因为 task queue 是所有线程共有的</span></span><br><span class="line">        <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(mutex_);</span><br><span class="line">        tasks_.emplace(task);</span><br><span class="line">    &#125;</span><br><span class="line">    condition_.notify_one();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _THREADPOOL_H_ */</span></span></span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"threadpool.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">process_to_test</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; i; ++x) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; j; ++y) &#123;</span><br><span class="line">                    ++count;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Thread num: "</span> &lt;&lt; -(i - <span class="number">8</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Test test;</span><br><span class="line">    <span class="function">ThreadPool <span class="title">pool</span><span class="params">(<span class="number">8</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        pool.EnQueue(<span class="built_in">std</span>::bind(&amp;Test::process_to_test, &amp;test, <span class="number">8</span> - i, <span class="number">1000000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Progschj/ThreadPool：<a href="https://github.com/progschj/ThreadPool" target="_blank" rel="noopener">https://github.com/progschj/ThreadPool</a></li><li>C++11线程池实现：<a href="https://blog.csdn.net/zdarks/article/details/46994607" target="_blank" rel="noopener">https://blog.csdn.net/zdarks/article/details/46994607</a></li><li>线程池的原理及实现：<a href="https://blog.csdn.net/Hsuxu/article/details/8985931" target="_blank" rel="noopener">https://blog.csdn.net/Hsuxu/article/details/8985931</a></li><li>基于c++11的100行实现简单线程池：<a href="https://blog.csdn.net/gcola007/article/details/78750220" target="_blank" rel="noopener">https://blog.csdn.net/gcola007/article/details/78750220</a></li><li>C++11并发学习之六：线程池的实现：<a href="https://blog.csdn.net/caoshangpa/article/details/80374651" target="_blank" rel="noopener">https://blog.csdn.net/caoshangpa/article/details/80374651</a></li><li>使用C++11实现线程池的两种方法：<a href="https://blog.csdn.net/liushengxi_root/article/details/83932654" target="_blank" rel="noopener">https://blog.csdn.net/liushengxi_root/article/details/83932654</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是线程池？&quot;&gt;&lt;a href=&quot;#什么是线程池？&quot; class=&quot;headerlink&quot; title=&quot;什么是线程池？&quot;&gt;&lt;/a&gt;什么是线程池？&lt;/h2&gt;&lt;p&gt;传统多线程方案中采用的服务器模型是一旦接受到请求之后，即创建一个新的线程，由该线程执行任务。任务执行
      
    
    </summary>
    
      <category term="C++" scheme="https://songkc.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://songkc.github.io/tags/C/"/>
    
      <category term="C++11" scheme="https://songkc.github.io/tags/C-11/"/>
    
      <category term="并发编程" scheme="https://songkc.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Reactor 模式</title>
    <link href="https://songkc.github.io/2019/02/25/Reactor%E6%A8%A1%E5%BC%8F/"/>
    <id>https://songkc.github.io/2019/02/25/Reactor模式/</id>
    <published>2019-02-25T13:15:09.000Z</published>
    <updated>2019-05-03T11:11:36.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Reactor-模式"><a href="#什么是-Reactor-模式" class="headerlink" title="什么是 Reactor 模式"></a>什么是 Reactor 模式</h2><p>反应器设计模式（Reactor pattern）是一种为处理并发服务请求，并将请求提交到一个或者多个服务处理程序的事件设计模式。当客户端请求抵达后，服务处理程序使用多路分配策略，由一个非阻塞的线程来接收所有的请求，然后派发这些请求至相关的工作线程进行处理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/25/Reactor模式/Reactor_Simple.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Reactor-模式结构"><a href="#Reactor-模式结构" class="headerlink" title="Reactor 模式结构"></a>Reactor 模式结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/25/Reactor模式/Reactor_Structures.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><strong>Handle：</strong>句柄，指 Windows 中的句柄，在 Linux 中一般称为文件描述符，是对资源在操作系统层面上的一种抽象，它可以是打开的文件、一个套接字（Socket）、Timer 等。由于 Reactor 模式一般使用在网络编程中，因而这里一般指 Socket Handle，即一个网络连接（Connection）。这个 Handle 注册到 Synchronous Event Demultiplexer 中，以监听 Handle 中发生的事件，对 Server Socket Handle 可以是 CONNECT 事件，对 Socket Handle 可以是 READ、WRITE、CLOSE 事件等。</li><li><strong>Synchronous Event Demultiplexer：</strong>同步事件分离器，本质上是系统调用。比如 Linux 中的 select、poll、epoll。会阻塞等待一系列的 Handle 中的事件到来，如果阻塞等待返回，即表示在返回的 Handle 中可以不阻塞的执行返回的事件。</li><li><strong>Initiation Dispatcher：</strong>初始分发器，用于管理 Event Handler，即 Event Handler 的容器，提供注册、移除 Event Handler 的方法；另外，它还作为 Reactor 模式的入口调用 Synchronous Event Demultiplexer 的 select 方法以阻塞等待事件返回，当阻塞等待返回时，根据发生事件的 Handle，Initiation Dispatcher 将其分发给对应的 Event Handler 处理，即回调 Event Handler 中的 handle_event() 方法。</li><li><strong>Event Handler：</strong>事件处理器，定义事件处理方法：handle_event()，以供 Initiation Dispatcher 回调使用。当 Handle 上有事件发生时，回调方法便会执行，一种事件处理机制。</li><li><strong>Concrete Event Handler：</strong>具体的事件处理器，事件 Event Handler 的接口，实现特定事件处理的业务逻辑。</li></ul><h2 id="Reactor-模式处理流程"><a href="#Reactor-模式处理流程" class="headerlink" title="Reactor 模式处理流程"></a>Reactor 模式处理流程</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/25/Reactor模式/Reactor_Sequence.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>（1）初始化 Initiation Dispatcher，并初始化一个 Handle 到 Event Handler 的映射（Map）。</p><p>（2）注册 Event Handler 到 Initiation Dispatcher 上，每个 Event Handler 包含对相应 Handle 的引用，从而建立 Handle 到 Event Handler 的映射（Map）。</p><p>（3）当所有的 Event Handler 都注册到 Initiation Dispatcher 上后，Initiation Dispatcher 会调用 handle_events() 方法来启动 Initiation Dispatcher 的事件循环，这时 Initiation Dispatcher 会将每个 Event Handler 关联的 Handle 合并，并使用 Synchronous Event Demultiplexer 调用 select() 方法来阻塞等待 Handle 上事件的发生。</p><p>（4）当与某个或某些 Handle 对应的 Event 发生时，Synchronous Event Demultiplexer 便会通知 Initiation Dispatcher。</p><p>（5）Initiation Dispatcher 会根据相应的 Handle 触发 Event Handler 的 handle_event() 回调方法。</p><p>（6）在 Event Handler 的 handle_events() 方法中还可以向 Initiation Dispatcher 中注册新的 Event Handler。比如对 Acceptor Event Handler 来说，当有新的 Client 连接时，它会产生新的 Event Handler 以处理新的连接，并注册到 Initiation Dispatcher 中。</p><h2 id="Reactor-模式实例"><a href="#Reactor-模式实例" class="headerlink" title="Reactor 模式实例"></a>Reactor 模式实例</h2><p>在 <a href="http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf" target="_blank" rel="noopener">Reactor An Object Behavioral Pattern for Demultiplexing and Dispatching Handles for Synchronous Events</a> 中，一直以 Logging Server 来分析 Reactor 模式，这个 Logging Server 的实现完全遵循这里对 Reactor 的描述，因而放在这里以做参考。</p><p>Logging Server 中的 Reactor 模式实现分两个部分：<strong>Client 连接到 Logging Server</strong> 和 <strong>Client 向 Logging Server 写 log</strong> 。因而对它的描述分成这两个步骤。</p><h3 id="Client-连接到-Logging-Server"><a href="#Client-连接到-Logging-Server" class="headerlink" title="Client 连接到 Logging Server"></a>Client 连接到 Logging Server</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/25/Reactor模式/Reactor_LoggingServer_connect.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>（1）Logging Server 注册 Logging Acceptor 到 Initiation Dispatcher。</p><p>（2）Logging Server 调用 Initiation Dispatcher 的 handle_events() 方法启动。</p><p>（3）Initiation Dispatcher 内部（Synchronous Event Demultiplexer）调用 select() 方法，阻塞等待 Client 连接。</p><p>（4）Client 连接到 Logging Server。</p><p>（5）Initiation Disptcher 中的（Synchronous Event Demultiplexer） select() 方法返回，并根据返回找到 Logging Acceptor 并告知其有新的连接到来。 </p><p>（6）Logging Acceptor 调用 accept() 方法接受这个新连接。</p><p>（7）Logging Acceptor 调用 create() 方法创建新的 Logging Handler。</p><p>（8）新的 Logging Handler 注册到 Initiation Dispatcher 中(同时也注册到 Synchonous Event Demultiplexer 中)，等待 Client 发起写 log 请求。</p><h3 id="Client-向-Logging-Server-写-log"><a href="#Client-向-Logging-Server-写-log" class="headerlink" title="Client 向 Logging Server 写 log"></a>Client 向 Logging Server 写 log</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/25/Reactor模式/Reactor_LoggingServer_log.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>（1）Client 发送 log 到 Logging Server。</p><p>（2）Initiation Dispatcher 中的（Synchronous Event Demultiplexer）监测到相应的 Handle 中有事件发生，select() 方法返回，根据返回的 Handle 找到 Logging Handler，并回调 Logging Handler 中的 handle_event() 方法。</p><p>（3）Logging Handler 中的 handle_event() 方法中使用 recv() 方法读取 Handle 中的 log 信息。</p><p>（4）将接收到的 log 信息使用 write() 方法写入到日志文件、数据库等中。步骤 3 和 4 循环直到当前日志处理完成。</p><p>（5）返回到 Initiation Dispatcher 等待下一次日志写请求。</p><h2 id="如何使用-Reactor-模式"><a href="#如何使用-Reactor-模式" class="headerlink" title="如何使用 Reactor 模式"></a>如何使用 Reactor 模式</h2><p>在网络服务和分布式对象中，对于网络中的某一个请求处理，我们比较关注的内容大致为：读取请求（Read request）、 解码请求（Decode request）、处理服务（Process service）、 编码答复（Encode reply）、 发送答复（Send reply）。但是每一步对系统的开销和效率又不尽相同。</p><h3 id="传统服务设计（Classic-Service-Design）"><a href="#传统服务设计（Classic-Service-Design）" class="headerlink" title="传统服务设计（Classic Service Design）"></a>传统服务设计（Classic Service Design）</h3><p>对于传统的服务设计，每一个到来的请求，系统都会分配一个线程去处理，这样看似合乎情理，但是，当系统请求量瞬间暴增时，会直接把系统拖垮。因为在高并发情况下，系统创建的线程数量是有限的。传统系统设计如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/25/Reactor模式/classic.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="基础-Reactor-设计（Basic-Reactor-Design）"><a href="#基础-Reactor-设计（Basic-Reactor-Design）" class="headerlink" title="基础 Reactor 设计（Basic Reactor Design）"></a>基础 Reactor 设计（Basic Reactor Design）</h3><p>单线程版的 Reactor 模式如下图所示。对于客户端的所有请求，都有一个专门的线程去进行处理，这个线程无限循环去监听是否有来自客户端的请求到来，一旦收到客户端的请求，就将其分发给相应的处理器进行处理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/25/Reactor模式/basic.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="工作线程池-Reactor-设计（Worker-Thread-Pools-for-Reactor）"><a href="#工作线程池-Reactor-设计（Worker-Thread-Pools-for-Reactor）" class="headerlink" title="工作线程池 Reactor 设计（Worker Thread Pools for Reactor）"></a>工作线程池 Reactor 设计（Worker Thread Pools for Reactor）</h3><p>考虑到工作线程的复用，将工作线程设计为线程池。将处理器的执行放入线程池，多线程进行业务处理。但 Reactor 仍为单个线程。工作线程使用线程池实现如下图所示。 </p><p><img src="/2019/02/25/Reactor模式/threadpool.png" alt=""></p><h3 id="多-Reactor-设计（Multiple-Reactor-Design）"><a href="#多-Reactor-设计（Multiple-Reactor-Design）" class="headerlink" title="多 Reactor 设计（Multiple Reactor Design）"></a>多 Reactor 设计（Multiple Reactor Design）</h3><p>对于多个 CPU 的机器，为充分利用系统资源，将 Reactor 拆分为两部分。MainReactor 负责监听连接，accept 连接给 SubReactor 处理，为什么要单独分一个 Reactor 来处理监听呢？因为像 TCP 这样需要经过3次握手才能建立的连接，建立连接的过程也是要耗时间和资源的，单独分一个 Reactor 来处理，可以提高性能。实现如下图所示。 </p><p><img src="/2019/02/25/Reactor模式/multiple.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>（1）响应快，不必为单个同步时间所阻塞，虽然 Reactor 本身依然是同步的。</p><p>（2）编程相对简单，可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销。</p><p>（3）可扩展性，可以方便的通过增加 Reactor 实例个数来充分利用 CPU 资源。</p><p>（4）可复用性，Reactor 框架本身与具体事件处理逻辑无关，具有很高的复用性。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>（1）相比传统的简单模型，Reactor 增加了一定的复杂性，因而有一定的门槛，并且不易于调试。 </p><p>（2）Reactor 模式需要底层的 Synchronous Event Demultiplexer 支持，比如 Java 中的 Selector 支持，操作系统的 select 系统调用支持，如果要自己实现 Synchronous Event Demultiplexer 可能不会有那么高效。 </p><p>（3） Reactor 模式在 I/O 读写数据时还是在同一个线程中实现的，即使使用多 个Reactor 机制的情况下，那些共享一个 Reactor 的 Handle 如果出现一个长时间的数据读写，会影响这个 Reactor 中其他 Handle 的相应时间，比如在大文件传输时，I/O 操作就会影响其他 Client 的相应时间，因而对这种操作，使用传统的 Thread-Per-Connection 或许是一个更好的选择，或则此时使用 Proactor 模式。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Reactor模式：<a href="https://www.jianshu.com/p/eef7ebe28673" target="_blank" rel="noopener">https://www.jianshu.com/p/eef7ebe28673</a></li><li>高性能IO之Reactor：<a href="https://www.cnblogs.com/doit8791/p/7461479.html" target="_blank" rel="noopener">https://www.cnblogs.com/doit8791/p/7461479.html</a></li><li>细说Reactor模式：<a href="https://blog.csdn.net/u010168160/article/details/53019039" target="_blank" rel="noopener">https://blog.csdn.net/u010168160/article/details/53019039</a></li><li><p>Reactor模式是什么：<a href="https://blog.csdn.net/u013219087/article/details/81229873" target="_blank" rel="noopener">https://blog.csdn.net/u013219087/article/details/81229873</a></p></li><li><p>Reactor模式详解：<a href="http://www.blogjava.net/DLevin/archive/2015/09/02/427045.html" target="_blank" rel="noopener">http://www.blogjava.net/DLevin/archive/2015/09/02/427045.html</a></p></li><li>Reactor（反应器）模式初探：<a href="https://blog.csdn.net/pistolove/article/details/53152708" target="_blank" rel="noopener">https://blog.csdn.net/pistolove/article/details/53152708</a></li><li><a href="http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf" target="_blank" rel="noopener">Reactor An Object Behavioral Pattern for Demultiplexing and Dispatching Handles for Synchronous Events</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是-Reactor-模式&quot;&gt;&lt;a href=&quot;#什么是-Reactor-模式&quot; class=&quot;headerlink&quot; title=&quot;什么是 Reactor 模式&quot;&gt;&lt;/a&gt;什么是 Reactor 模式&lt;/h2&gt;&lt;p&gt;反应器设计模式（Reactor patter
      
    
    </summary>
    
      <category term="I/O" scheme="https://songkc.github.io/categories/I-O/"/>
    
    
      <category term="I/O" scheme="https://songkc.github.io/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>Linux - I/O 模型</title>
    <link href="https://songkc.github.io/2019/02/19/Linux-I-O%E6%A8%A1%E5%9E%8B/"/>
    <id>https://songkc.github.io/2019/02/19/Linux-I-O模型/</id>
    <published>2019-02-19T11:33:37.000Z</published>
    <updated>2019-04-08T17:02:45.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h3><p>以下皆是基于 Linux，现代操作系统都是采用虚拟寻址，<strong>处理器先产生一个虚拟地址</strong>，通过<strong>地址翻译成物理地址（内存的地址）</strong>，再通过总线的传递，最后处理器拿到物理地址存储的数据。</p><p>操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。</p><p>对 32 位操作系统而言，它的寻址空间（虚拟存储空间）为 4G（2 的 32 次方）。针对 Linux 操作系统而言，将最高的 1G 地址（从虚拟地址 0xC0000000 到 0xFFFFFFFF），供内核使用，称为内核空间，而将较低的 3G 地址（从虚拟地址 0x00000000 到 0xBFFFFFFF），供各个进程使用，称为用户空间。</p><h3 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h3><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程的上下文切换（也叫调度）。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</p><p>从一个进程的运行转到另一个进程上运行，这个过程中经过下面<strong>这些变化</strong>：</p><p>（1）<strong>保存当前进程 A 的上下文</strong>。上下文就是内核再次唤醒当前进程时所需要的状态，由一些<strong>对象（程序计数器、状态寄存器、用户栈等各种内核数据结构）的值</strong>组成。</p><p>（2）<strong>切换页全局目录以安装一个新的地址空间。</strong></p><p>（3）<strong>恢复进程 B 的上下文</strong>。</p><p>进程上下文切换是一个比较消耗资源的过程。</p><h3 id="进程的阻塞"><a href="#进程的阻塞" class="headerlink" title="进程的阻塞"></a>进程的阻塞</h3><p>正在运行状态的进程，由于<strong>期待的某些事件未发生</strong>，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行<strong>阻塞原语（Block）</strong>，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行状态的进程（已获得 CPU），才可能将其转为阻塞状态。<strong>当进程转入阻塞状态时，是不占用 CPU 资源的</strong>。</p><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p><strong>在 Linux 系统中一切皆可以看成是文件，文件又可分为：普通文件、目录文件、链接文件和设备文件。</strong>文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，其是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行 I/ O操作的系统调用都通过文件描述符。</p><p>文件描述符在形式上是一个<strong>非负整数</strong>。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于 UNIX、Linux 这样的操作系统。</p><h3 id="直接-I-O-和-缓存-I-O"><a href="#直接-I-O-和-缓存-I-O" class="headerlink" title="直接 I/O 和 缓存 I/O"></a>直接 I/O 和 缓存 I/O</h3><p>缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，以 <strong>write</strong> 操作为例，数据会先被拷贝到进程缓冲区，再拷贝到操作系统内核的缓冲区中，然后才会写到相应存储设备中。</p><p><strong>缓存 I/O 的 write 操作：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/19/Linux-I-O模型/cache.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>直接 I/O 的 write 操作：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/19/Linux-I-O模型/direct.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>write 操作过程中会有很多次拷贝，直到数据全部拷贝到磁盘。</strong></p><h2 id="I-O-模式"><a href="#I-O-模式" class="headerlink" title="I/O 模式"></a>I/O 模式</h2><p>对于<strong>一次 I/O 访问（这里以 read 操作举例）</strong>，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区，最后交给进程。</p><p>所以说，<strong>当一个 read 操作发生时，它会经历两个阶段：</strong></p><p>（1）等待数据准备（Waiting for the data to be ready）</p><p>（2）将数据从内核拷贝到进程中（Copying the data from the kernel to the process）</p><p>正式因为这两个阶段，<strong>Linux 系统产生了下面五种网络模式的方案：</strong></p><p>（1）阻塞 I/O（Blocking I/O）</p><p>（2）非阻塞 I/O（Non-blocking I/O）</p><p>（3）I/O 多路复用（I/O multiplexing）</p><p>（4）信号驱动 I/O（Signal driven I/O）</p><p>（5）异步 I/O（Asynchronous I/O）</p><h3 id="阻塞-I-O（Blocking-I-O）"><a href="#阻塞-I-O（Blocking-I-O）" class="headerlink" title="阻塞 I/O（Blocking I/O）"></a>阻塞 I/O（Blocking I/O）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/19/Linux-I-O模型/blocking.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>以 read 操作为例：</p><p>（1）进程发起read，进行recvfrom系统调用；</p><p>（2）内核开始第一阶段，准备数据（从磁盘拷贝到内核缓冲区），进程请求的数据并不是一下就能准备好；准备数据是要消耗时间的；</p><p>（3）与此同时，进程阻塞（进程是自己选择阻塞与否），等待数据中；</p><p>（4）直到数据从内核拷贝到了用户空间，内核返回结果，进程解除阻塞。</p><p>也就是说，<strong>内核准备数据</strong>和<strong>数据从内核拷贝到进程内</strong>这两个过程都是阻塞的。</p><h3 id="非阻塞（Non-blocking-I-O）"><a href="#非阻塞（Non-blocking-I-O）" class="headerlink" title="非阻塞（Non-blocking I/O）"></a>非阻塞（Non-blocking I/O）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/19/Linux-I-O模型/non-blocking.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>（1）当用户进程发出 read 操作时，如果 kernel 中的数据还没有准备好；</p><p>（2）那么它并不会阻塞用户进程，而是立刻返回一个 <strong>error</strong>，从用户进程角度讲 ，它发起一个 read 操作后，并不需要等待，而是马上就得到了一个结果；</p><p>（3）用户进程判断结果是一个 <strong>error</strong> 时，它就知道数据还没有准备好，于是它可以再次发送 read 操作。一旦 kernel 中的数据准备好了，并且又再次收到了用户进程的 system call；</p><p>（4）那么它马上就将数据拷贝到了用户内存，然后返回。</p><p>所以，Non-blocking I/O 的特点是<strong>用户进程在内核准备数据的阶段需要不断的主动询问数据是否准备好。但是，轮寻对于 CPU 来说是较大的浪费，一般只有在特定的场景下才使用</strong>。</p><h3 id="I-O-多路复用（I-O-multiplexing）"><a href="#I-O-多路复用（I-O-multiplexing）" class="headerlink" title="I/O 多路复用（I/O multiplexing）"></a>I/O 多路复用（I/O multiplexing）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/19/Linux-I-O模型/multiplexing.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>I/O 多路复用实际上就是用 <strong>select, poll, epoll</strong> 监听多个 I/O 对象，当 I/O 对象有变化（有数据）的时候就通知用户进程。好处就是单个进程可以处理多个 Socket。I/O 多路复用的流程：</p><p>（1）当用户进程调用了 select，那么整个进程会被阻塞；</p><p>（2）而同时，kernel 会“监视”所有 select 负责的 Socket；</p><p>（3）当任何一个 Socket 中的数据准备好了，select 就会返回；</p><p>（4）这个时候用户进程再调用 read 操作，将数据从 kernel 拷贝到用户进程。</p><p>所以，<strong>I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select() 函数就可以返回</strong>。</p><p>这个图和 Blocking I/O 的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个 system call (select 和 recvfrom)，而 Blocking I/O 只调用了一个 system call (recvfrom)。但是，用 select 的优势在于它可以同时处理多个连接。</p><p>所以，如果处理的连接数不是很高的话，使用 select/epoll 的 Webserver 不一定比使用<strong>多线程 + Blocking I/O</strong> 的 Webserver 性能更好，可能延迟还更大。select/epoll 的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</p><p>在 I/O multiplexing 模型中，对于每一个 Socket，一般都设置成为 Non-blocking，但如上图所示，整个用户进程其实是一直被阻塞的，只不过进程是被 select 这个函数阻塞，而不是被 Socket I/O 操作给阻塞。</p><h3 id="信号驱动-I-O（Signal-driven-I-O）"><a href="#信号驱动-I-O（Signal-driven-I-O）" class="headerlink" title="信号驱动 I/O（Signal driven I/O）"></a>信号驱动 I/O（Signal driven I/O）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/19/Linux-I-O模型/signal.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>（1）用户进程建立 sigio 的信号处理程序，系统调用 sigaction 执行信号处理函数（非阻塞，立刻返回）</p><p>（2）当 kernel 中的数据准备好了，系统生成 sigio 信号，通过信号回调通知用户进程来读取数据；</p><p>（3）这个时候用户进程再调用 read 操作，将数据从 kernel 拷贝到用户进程。</p><h3 id="异步-I-O（Asynchronous-I-O）"><a href="#异步-I-O（Asynchronous-I-O）" class="headerlink" title="异步 I/O（Asynchronous I/O）"></a>异步 I/O（Asynchronous I/O）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/19/Linux-I-O模型/asynchronous.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>（1）用户进程发起 read 操作之后，立刻就可以开始去做其它的事；</p><p>（2）而另一方面，从 kernel 的角度，当它收到一个 asynchronous read 操作之后，首先它会立刻返回，所以不会对用户进程产生任何阻塞；</p><p>（3）然后 kernel 会等待数据准备完成，数据准备好后直接将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个 signal，告诉用户进程 read 操作完成了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="Blocking-和-Non-blocking-的区别"><a href="#Blocking-和-Non-blocking-的区别" class="headerlink" title="Blocking 和 Non-blocking 的区别"></a>Blocking 和 Non-blocking 的区别</h3><p>使用 Blocking I/O 会一直阻塞住对应的进程直到操作完成，而 Non-blocking I/O 在 kernel 还没准备好数据的情况下会立刻返回。</p><h3 id="Synchronous-和-Asynchronous-的区别"><a href="#Synchronous-和-Asynchronous-的区别" class="headerlink" title="Synchronous 和 Asynchronous 的区别"></a>Synchronous 和 Asynchronous 的区别</h3><p>在说明 Synchronous I/O 和 Asynchronous I/O 的区别之前，需要先给出两者的定义。POSIX 的定义是这样子的：</p><ul><li>A synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes;</li><li>An asynchronous I/O operation does not cause the requesting process to be blocked;</li></ul><p>两者的区别就在于 Synchronous I/O 进行 I/O 操作的时候会将进程阻塞。按照这个定义，之前所述的 Blocking I/O，Non-blocking I/O，I/O multiplexing 都属于 Synchronous I/O。</p><p>有人会说 Non-blocking I/O 并没有被阻塞，然而这里有个非常“狡猾”的地方，定义中所指的 ”IO operation” 是指真实的 I/O 操作，就是例子中的 <strong>recvfrom</strong> 这个 system call。<strong>Bon-blocking I/O 在执行 recvfrom 这个system call的时候，如果 kernel 的数据没有准备好，这时候不会阻塞进程。但是，当 kernel 中数据准备好的时候，recvfrom 会将数据从 kernel 拷贝到用户内存中，这个时候进程是被阻塞的</strong>。</p><p>而 Asynchronous I/O 则不一样，当进程发起 I/O 操作之后，就直接返回继续执行其他任务，直到 kernel 发送一个信号，告诉进程说 I/O 完成。在这整个过程中，进程完全没有被阻塞的。</p><h3 id="Non-blocking-I-O-和-Asynchronous-I-O的区别"><a href="#Non-blocking-I-O-和-Asynchronous-I-O的区别" class="headerlink" title="Non-blocking I/O 和 Asynchronous I/O的区别"></a>Non-blocking I/O 和 Asynchronous I/O的区别</h3><p>可以发现 Non-blocking I/O 和 Asynchronous I/O 的区别还是很明显的。</p><ul><li>在 Non-blocking I/O 中，虽然进程大部分时间都不会被阻塞，但是它仍然要求进程主动的去检查数据是否准备好，并且当数据准备完成以后，也需要进程主动的再次调用 recvfrom 来将数据拷贝到用户内存。</li><li>而 Asynchronous I/O 则完全不同。它就像是用户进程将整个 I/O 操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查 I/O 操作的状态，也不需要主动的去拷贝数据。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>通俗易懂讲解IO模型：<a href="https://www.cnblogs.com/javalyy/p/8882066.html" target="_blank" rel="noopener">https://www.cnblogs.com/javalyy/p/8882066.html</a></li><li>五种IO模型：<a href="https://blog.csdn.net/ZWE7616175/article/details/80591587" target="_blank" rel="noopener">https://blog.csdn.net/ZWE7616175/article/details/80591587</a></li><li>IO模式和IO多路复用：<a href="https://www.cnblogs.com/zingp/p/6863170.html" target="_blank" rel="noopener">https://www.cnblogs.com/zingp/p/6863170.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;h3 id=&quot;用户空间和内核空间&quot;&gt;&lt;a href=&quot;#用户空间和内核空间&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="I/O" scheme="https://songkc.github.io/categories/I-O/"/>
    
    
      <category term="Linux" scheme="https://songkc.github.io/tags/Linux/"/>
    
      <category term="I/O" scheme="https://songkc.github.io/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>C++11 - Lambda 表达式</title>
    <link href="https://songkc.github.io/2018/12/29/C++11-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://songkc.github.io/2018/12/29/C++11-Lambda表达式/</id>
    <published>2018-12-29T09:01:42.000Z</published>
    <updated>2019-03-31T18:56:22.652Z</updated>
    
    <content type="html"><![CDATA[<p>C++11 的一大亮点就是引入了 Lambda 表达式。利用 Lambda 表达式，可以方便的定义和创建匿名函数。</p><h2 id="声明-Lambda-表达式"><a href="#声明-Lambda-表达式" class="headerlink" title="声明 Lambda 表达式"></a>声明 Lambda 表达式</h2><p>Lambda 表达式完整的声明格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture <span class="built_in">list</span>] (params <span class="built_in">list</span>) <span class="keyword">mutable</span> exception-&gt; <span class="keyword">return</span> type &#123; function body &#125;</span><br></pre></td></tr></table></figure><p>各项具体含义如下：</p><ol><li>capture list：捕获外部变量列表</li><li>params list：形参列表</li><li>mutable：用来说用是否可以修改捕获的变量</li><li>exception：异常设定</li><li>return type：返回类型</li><li>function body：函数体</li></ol><p>此外，我们还可以省略其中的某些成分来声明“不完整”的 Lambda 表达式，常见的有以下几种：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">[capture list] (params list) -&gt; return type { function body }</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">[capture list] (params list) { function body }</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">[capture list] { function body }</td></tr></tbody></table><ul><li>格式 1 声明了 <strong>const</strong> 类型的表达式，这种类型的表达式不能修改捕获列表中的值。</li><li>格式 2 省略了返回值类型，但编译器可以根据以下规则推断出 Lambda 表达式的返回类型：<ul><li>如果 function body 中没有 <strong>return</strong> 语句，则返回值为 <strong>void</strong> 类型；</li><li>如果 function body 中存在 <strong>return</strong> 语句，则该 Lambda 表达式的返回类型由 <strong>return</strong> 语句的返回类型确定。</li></ul></li><li>格式 3 中省略了参数列表，类似普通函数中的无参函数。</li></ul><h2 id="捕获外部变量"><a href="#捕获外部变量" class="headerlink" title="捕获外部变量"></a>捕获外部变量</h2><p>Lambda 表达式可以使用其可见范围内的外部变量，但必须明确声明（明确声明哪些外部变量可以被该 Lambda 表达式使用）。那么，在哪里指定这些外部变量呢？Lambda 表达式通过在最前面的方括号 <code>[]</code> 来明确指明其内部可以访问的外部变量，这一过程也称作 Lambda 表达式“捕获”了外部变量。</p><p>通过一个例子来直观地说明一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = [a] &#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; &#125;; </span><br><span class="line">    f();  <span class="comment">// 输出：123</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//或通过“函数体”后面的‘()’传入参数</span></span><br><span class="line">    <span class="keyword">auto</span> x = [](<span class="keyword">int</span> a)&#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; &#125;(<span class="number">123</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子先声明了一个整型变量 <strong>a</strong>，然后再创建 Lambda 表达式，该表达式“捕获”了变量 <strong>a</strong>，这样在 Lambda 表达式函数体中就可以获得该变量的值。</p><p>类似参数传递方式（值传递、引入传递、指针传递），在Lambda表达式中，外部变量的捕获方式也有值捕获、引用捕获、隐式捕获。</p><h3 id="值捕获"><a href="#值捕获" class="headerlink" title="值捕获"></a>值捕获</h3><p>值捕获和参数传递中的值传递类似，被捕获的变量的值在 Lambda 表达式创建时通过值拷贝的方式传入，因此随后对该变量的修改不会影响影响 Lambda 表达式中的值。示例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = [a] &#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; &#125;; </span><br><span class="line">    a = <span class="number">321</span>;</span><br><span class="line">    f();  <span class="comment">// 输出：123</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是，如果以传值方式捕获外部变量，则在 Lambda 表达式函数体中不能修改该外部变量的值。</p><h3 id="引用捕获"><a href="#引用捕获" class="headerlink" title="引用捕获"></a>引用捕获</h3><p>使用引用捕获一个外部变量，只需要在捕获列表变量前面加上一个引用说明符 <code>&amp;</code>。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = [&amp;a] &#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; &#125;; </span><br><span class="line">    a = <span class="number">321</span>;</span><br><span class="line">    f();  <span class="comment">// 输出：321</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从示例中可以看出，引用捕获的变量使用的实际上就是该引用所绑定的对象。</p><h3 id="隐式捕获"><a href="#隐式捕获" class="headerlink" title="隐式捕获"></a>隐式捕获</h3><p>上面的<strong>值捕获</strong>和<strong>引用捕获</strong>都需要我们在捕获列表中显式列出 Lambda 表达式中使用的外部变量。除此之外，我们还可以让编译器根据函数体中的代码来推断需要捕获哪些变量，这种方式称之为<strong>隐式捕获</strong>。隐式捕获有两种方式，分别是 <code>[=]</code> 和 <code>[&amp;]</code>。<code>[=]</code> 表示以值捕获的方式捕获外部变量，<code>[&amp;]</code> 表示以引用捕获的方式捕获外部变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = [=] &#123; <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; &#125;;      <span class="comment">// 隐式值捕获</span></span><br><span class="line">    a = <span class="number">321</span>;</span><br><span class="line">    f();    <span class="comment">// 输出：123</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">auto</span> func = [&amp;] &#123; <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; &#125;;   <span class="comment">// 隐式引用捕获</span></span><br><span class="line">    b = <span class="number">321</span>;</span><br><span class="line">    func();  <span class="comment">// 输出：321</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合方式"><a href="#混合方式" class="headerlink" title="混合方式"></a>混合方式</h3><p>上面的例子，要么是值捕获，要么是引用捕获，Lambda 表达式还支持混合的方式捕获外部变量，混合方式主要是以上几种捕获方式的组合使用。</p><p>总结一下，C++11 中的 Lambda 表达式捕获外部变量主要有以下形式：</p><table><thead><tr><th style="text-align:center">捕获形式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">[]</td><td style="text-align:center">不捕获任何外部变量</td></tr><tr><td style="text-align:center">[变量名, …]</td><td style="text-align:center">默认以值得形式捕获指定的多个外部变量（用逗号分隔），如果引用捕获，需要显示声明（使用&amp;说明符）</td></tr><tr><td style="text-align:center">[this]</td><td style="text-align:center">以值的形式捕获this指针</td></tr><tr><td style="text-align:center">[=]</td><td style="text-align:center">以值的形式捕获所有外部变量</td></tr><tr><td style="text-align:center">[&amp;]</td><td style="text-align:center">以引用形式捕获所有外部变量</td></tr><tr><td style="text-align:center">[=, &amp;x]</td><td style="text-align:center">变量x以引用形式捕获，其余变量以传值形式捕获</td></tr><tr><td style="text-align:center">[&amp;, x]</td><td style="text-align:center">变量x以值的形式捕获，其余变量以引用形式捕获</td></tr></tbody></table><h2 id="修改捕获变量"><a href="#修改捕获变量" class="headerlink" title="修改捕获变量"></a>修改捕获变量</h2><p>前面我们提到过，在 Lambda 表达式中，如果以传值方式捕获外部变量，则函数体中不能修改该外部变量，否则会引发编译错误。那么有没有办法可以修改值捕获的外部变量呢？这是就需要使用 <strong>mutable</strong> 关键字，该关键字用以说明表达式体内的代码可以修改值捕获的变量，示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = [a]()<span class="keyword">mutable</span> &#123; <span class="built_in">cout</span> &lt;&lt; ++a; &#125;;  <span class="comment">// OK</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 输出：123</span></span><br><span class="line">    f();  <span class="comment">// 输出：124</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda-表达式的参数"><a href="#Lambda-表达式的参数" class="headerlink" title="Lambda 表达式的参数"></a>Lambda 表达式的参数</h2><p>Lambda 表达式的参数和普通函数的参数类似，那么这里为什么还要拿出来说一下呢？原因是在 Lambda 表达式中传递参数还有一些限制，主要有以下几点：</p><ol><li>参数列表中不能有默认参数</li><li>不支持可变参数</li><li>所有参数必须有参数名</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++11 的一大亮点就是引入了 Lambda 表达式。利用 Lambda 表达式，可以方便的定义和创建匿名函数。&lt;/p&gt;
&lt;h2 id=&quot;声明-Lambda-表达式&quot;&gt;&lt;a href=&quot;#声明-Lambda-表达式&quot; class=&quot;headerlink&quot; title=&quot;声
      
    
    </summary>
    
      <category term="C++" scheme="https://songkc.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://songkc.github.io/tags/C/"/>
    
      <category term="C++11" scheme="https://songkc.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 671. Second Minimum Node in a Binary Tree</title>
    <link href="https://songkc.github.io/2018/10/15/LeetCode-671-Second-Minimum-Node-In-a-Binary-Tree/"/>
    <id>https://songkc.github.io/2018/10/15/LeetCode-671-Second-Minimum-Node-In-a-Binary-Tree/</id>
    <published>2018-10-15T02:01:22.000Z</published>
    <updated>2019-03-29T18:40:20.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly <code>two</code> or <code>zero</code> sub-node. If the node has two sub-nodes, then this node’s value is the smaller value among its two sub-nodes.</p><p>Given such a binary tree, you need to output the <strong>second minimum</strong> value in the set made of all the nodes’ value in the whole tree.</p><p>If no such second minimum value exists, output -1 instead.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example 1</span></span><br><span class="line">Input:</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">5</span></span><br><span class="line">     / \</span><br><span class="line">    <span class="number">5</span>   <span class="number">7</span></span><br><span class="line"></span><br><span class="line">Output: <span class="number">5</span></span><br><span class="line">Explanation: The smallest value is <span class="number">2</span>, the second smallest value is <span class="number">5.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example 2</span></span><br><span class="line">Input:</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Output: <span class="number">-1</span></span><br><span class="line">Explanation: The smallest value is <span class="number">2</span>, but there isn't any second smallest value.</span><br></pre></td></tr></table></figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>由题意可知，父节点的值一定小于等于两个子节点的值，因而根节点的值一定是最小值，那么可以推导出值第二小的节点在根节点的左子树中或在根节点的右子树中或不存在，同时，当一个节点的值大于根节点的值(即最小值)时，由于父节点的值一定小于等于两个子节点的值，那么由该节点衍生的子树的节点的值一定大于等于该节点的值，因此该节点衍生的子树并不需要检查。</p><p>解决的方法有多种，这里我使用了 BFS（广度优先搜索）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// unrecursion by BFS</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; que;</span><br><span class="line">        que.push(root);</span><br><span class="line">        <span class="keyword">int</span> min = root-&gt;val;</span><br><span class="line">        <span class="keyword">int</span> left, right, smin = INT_MAX;</span><br><span class="line">        <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">            TreeNode* temp = que.front();</span><br><span class="line">            <span class="keyword">if</span> (min &lt; temp-&gt;val) &#123;</span><br><span class="line">                smin = (smin &gt; temp-&gt;val ? temp-&gt;val : smin);</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp-&gt;left != <span class="literal">NULL</span> &amp;&amp; temp-&gt;right != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                que.push(temp-&gt;left);</span><br><span class="line">                que.push(temp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            que.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> smin == INT_MAX ? <span class="number">-1</span> : smin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><p>学习了一下 LeetCode 上讨论区的做法，将递归和分治的做法也写出来。</p><h3 id="Recursion-Method（递归方法）"><a href="#Recursion-Method（递归方法）" class="headerlink" title="Recursion Method（递归方法）"></a>Recursion Method（递归方法）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// recursion</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> findSecMin(root, root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findSecMin</span><span class="params">(TreeNode* node, <span class="keyword">int</span> first)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;val &gt; first) <span class="keyword">return</span> node-&gt;val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = findSecMin(node-&gt;left, first);</span><br><span class="line">        <span class="keyword">int</span> right = findSecMin(node-&gt;right, first);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">-1</span> &amp;&amp; right == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="number">-1</span> &amp;&amp; right == <span class="number">-1</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">if</span> (right != <span class="number">-1</span> &amp;&amp; left == <span class="number">-1</span>) <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Divide-and-Conquer-Method-（分治方法）"><a href="#Divide-and-Conquer-Method-（分治方法）" class="headerlink" title="Divide and Conquer Method （分治方法）"></a>Divide and Conquer Method （分治方法）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="comment">// divide and conquer</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = root-&gt;left-&gt;val;</span><br><span class="line">        <span class="keyword">int</span> right = root-&gt;right-&gt;val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left == root-&gt;val)</span><br><span class="line">            left = findSecondMinimumValue(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (right == root-&gt;val)</span><br><span class="line">            right = findSecondMinimumValue(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">-1</span> &amp;&amp; right == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="number">-1</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (right == <span class="number">-1</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> left &gt; right ? right : left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Given a non-empty special binary t
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://songkc.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://songkc.github.io/tags/LeetCode/"/>
    
      <category term="二叉树" scheme="https://songkc.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 32. Longest Valid Parentheses</title>
    <link href="https://songkc.github.io/2018/10/11/LeetCode-32-Longest-Valid-Parentheses/"/>
    <id>https://songkc.github.io/2018/10/11/LeetCode-32-Longest-Valid-Parentheses/</id>
    <published>2018-10-11T06:41:29.000Z</published>
    <updated>2019-03-29T18:36:28.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><ul><li>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">For <span class="string">"(()"</span>, the longest valid parentheses substring is <span class="string">"()"</span>, which has</span><br><span class="line">length = <span class="number">2.</span></span><br><span class="line"></span><br><span class="line">Another example is <span class="string">")()())"</span>, where the longest valid parentheses</span><br><span class="line">substring is <span class="string">"()()"</span>, which has length = <span class="number">4.</span></span><br></pre></td></tr></table></figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>一开始只是简单的以为是求出所有合法的圆括号的数量，就直接用一个<strong>栈</strong>去写，提交后才发现理解错了，原来题目的意思是从找出字符串中最长的合法圆括号子串的长度。</p><p>重新审题后就能发现每个合法的字串其实都是由不合法的字串分隔开的，我的思路是用一个栈存储 <code>pair&lt;char, int&gt;</code> 类型的元素，<strong>char</strong> 为圆括号字符，<strong>int</strong> 为此时所有合法的圆括号数量。当栈顶元素字符为 <strong>‘(‘</strong> 且当前字符为 <strong>‘)’</strong> 时，就将栈顶元素 <strong>pop</strong> 出，并将合法圆括号数量 <strong>+2</strong>，到最后栈中留下的都是不合法的圆括号，其实就相当于将合法的圆括号字串分隔开的分隔符，此时就可以利用这些分隔符求出每个合法圆括号字串的长度，取最大的字串长度即可。算法的复杂度是 $O(n^2)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; &gt; stk;</span><br><span class="line">        pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; p(s[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">        stk.push(p);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stk.empty()) &#123;</span><br><span class="line">                pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; temp(s[i], count);</span><br><span class="line">                stk.push(temp);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; top = stk.top();</span><br><span class="line">            <span class="keyword">if</span> (top.first == <span class="string">'('</span> &amp;&amp; s[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">                count += <span class="number">2</span>;</span><br><span class="line">                stk.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; temp(s[i], count);</span><br><span class="line">                stk.push(temp);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stk.empty()) &#123;</span><br><span class="line">            pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; top = stk.top();</span><br><span class="line">            <span class="keyword">if</span> (top.second == count) &#123;</span><br><span class="line">                stk.pop();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> temp = count - top.second;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; temp) max = temp;</span><br><span class="line">            count -= temp;</span><br><span class="line">            stk.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; count) max = count;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><h3 id="精简代码"><a href="#精简代码" class="headerlink" title="精简代码"></a>精简代码</h3><p>LeetCode 讨论区发现，许多解答思路与我的思路是一样的，但我的代码显得有些冗余了，附上精简后的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">        stk.push(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> maxL = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            temp = stk.top();</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="number">-1</span> &amp;&amp; s[i] == <span class="string">')'</span> &amp;&amp; s[temp] == <span class="string">'('</span>) &#123;</span><br><span class="line">                stk.pop();</span><br><span class="line">                maxL = max(maxL, i - stk.top());</span><br><span class="line">            &#125; <span class="keyword">else</span> stk.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>还有用使用动态规划（DP）算法来解题的思路，这里也在此附上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> *V = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">int</span> open = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'('</span>) ++open;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">')'</span> &amp;&amp; open &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// matches found</span></span><br><span class="line">                V[i] = V[i - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// add matches from previous</span></span><br><span class="line">                <span class="keyword">if</span> (i - V[i] &gt; <span class="number">0</span>) V[i] += V[i - V[i]];</span><br><span class="line"></span><br><span class="line">                --open;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (V[i] &gt; max) max = V[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> V;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Given a string containing ju
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://songkc.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://songkc.github.io/tags/LeetCode/"/>
    
      <category term="字符串" scheme="https://songkc.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="动态规划" scheme="https://songkc.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 551. Student Attendance Record I</title>
    <link href="https://songkc.github.io/2018/10/05/LeetCode-551-Student-Attendence-Record-I/"/>
    <id>https://songkc.github.io/2018/10/05/LeetCode-551-Student-Attendence-Record-I/</id>
    <published>2018-10-05T01:02:33.000Z</published>
    <updated>2019-03-28T18:49:27.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string representing an attendance record for a student. The record only contains the following three characters:</p><ol><li><strong>‘A’</strong> : Absent.</li><li><strong>‘L’</strong> : Late.</li><li><strong>‘P’</strong> : Present.</li></ol><p>A student could be rewarded if his attendance record doesn’t contain <strong>more than one ‘A’ (absent)</strong> or <strong>more than two continuous ‘L’ (late)</strong>.</p><p>You need to return whether the student could be rewarded according to his attendance record.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"PPALLP"</span></span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"PPALLL"</span></span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkRecord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>先分析题目，根据题目的意思是说，只要缺勤超过两次或者迟到超过两次且是连续的就应该返回 <strong>false</strong>，缺勤超过两次这个直接记录就 OK，而这题的重点用更通俗的话来讲就是连续两天以上迟到，其实最简单的做法就是用一个变量 <code>late</code> 记录迟到的次数，迟到则加 <strong>1</strong>，不是迟到的则将 <strong>late</strong> 重置为 <strong>0</strong>，然后判断 <strong>late</strong> 是否大于 <strong>2</strong> 即可。这题算是比较简单的，巧妙的 <strong>if-else</strong> 就可以做出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkRecord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">abs</span> = <span class="number">0</span>, late = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'A'</span>) <span class="built_in">abs</span>++;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'L'</span>) late++;</span><br><span class="line">            <span class="keyword">else</span> late = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span> &gt; <span class="number">1</span> || late &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;You are given a string representin
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://songkc.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://songkc.github.io/tags/LeetCode/"/>
    
      <category term="字符串" scheme="https://songkc.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 48. Rotate Image</title>
    <link href="https://songkc.github.io/2018/09/30/LeetCode-48-Rotate-Image/"/>
    <id>https://songkc.github.io/2018/09/30/LeetCode-48-Rotate-Image/</id>
    <published>2018-09-30T11:54:52.000Z</published>
    <updated>2019-03-29T18:29:24.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><ul><li>You are given an <em>n</em> x <em>n</em> 2D matrix representing an image.</li><li>Rotate the image by 90 degrees (clockwise).</li></ul><p><strong>Note:</strong> You have to rotate the image <strong>in-place</strong>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix =</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix =</span><br><span class="line">[</span><br><span class="line">  [ <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>,<span class="number">11</span>],</span><br><span class="line">  [ <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>,<span class="number">10</span>],</span><br><span class="line">  [<span class="number">13</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">16</span>]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">15</span>,<span class="number">13</span>, <span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">14</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">12</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  [<span class="number">16</span>, <span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>问题主要在于不能使用额外的2维矩阵去求解，思路其实就是由内圈到外圈将整个矩阵顺时针旋转 90°，一是存放当前位置的值以便旋转后将值赋值到旋转后的新位置，二是推导出从当前位置到旋转后的新位置的公式，上述一二操作循环四个数字即可。整个算法的时间复杂度是 $O(n^2)​$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>, row = <span class="number">0</span>, col = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.size() / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; matrix.size() - i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                row = i; col = j;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; ++k) &#123;</span><br><span class="line">                    tmp = matrix[row][col];</span><br><span class="line">                    matrix[row][col] = temp;</span><br><span class="line">                    temp = row;</span><br><span class="line">                    row = col;</span><br><span class="line">                    col = matrix.size() - <span class="number">1</span> - temp;</span><br><span class="line">                    temp = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  n represents the matrix's dimension</span></span><br><span class="line"><span class="comment">  row represents the row of the present position</span></span><br><span class="line"><span class="comment">  col represents the column of the present position</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Actually, the transform function can be written as:</span></span><br><span class="line"><span class="comment">  new_row = col</span></span><br><span class="line"><span class="comment">  new_col = n - row - 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Example:</span></span><br><span class="line"><span class="comment">  1 2 3        7 2 1        7 4 1</span></span><br><span class="line"><span class="comment">  4 5 6   -&gt;   4 5 6   -&gt;   8 5 2</span></span><br><span class="line"><span class="comment">  7 8 9       9 8 3        9 6 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><p>LeetCode 讨论区上见到的，先将矩阵按主对角线翻转，再将翻转后的矩阵的每一行进行逆序，就可以完成对矩阵的 90° 旋转。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = m.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">                swap(m[i][j], m[j][i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            reverse(m[i].begin(), m[i].end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Example:</span></span><br><span class="line"><span class="comment">  1 2 3        1 4 7        7 4 1</span></span><br><span class="line"><span class="comment">  4 5 6   -&gt;   2 5 8   -&gt;   8 5 2</span></span><br><span class="line"><span class="comment">  7 8 9       3 6 9        9 6 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;You are given an &lt;em&gt;n&lt;/em&gt; 
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://songkc.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://songkc.github.io/tags/LeetCode/"/>
    
      <category term="数组" scheme="https://songkc.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 21. Merge Two Sorted Lists</title>
    <link href="https://songkc.github.io/2018/09/25/LeetCode-21-Merge-Two-Sorted-Lists/"/>
    <id>https://songkc.github.io/2018/09/25/LeetCode-21-Merge-Two-Sorted-Lists/</id>
    <published>2018-09-25T05:14:51.000Z</published>
    <updated>2019-03-29T18:29:01.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><ul><li>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>, <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span></span><br><span class="line">Output: <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>合并两个已按小到大排序的链表，最简单的做法就是新建一个链表，然后比较原有的两个链表当前节点的大小，然后选择较小的节点加到新建链表上，接着将被选中的链表的节点指向他的下一个，重复以上，知道某个链表已读到末尾或两个链表都为空，然后将未读完的链表的节点直接加到新建链表上就可以。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* node = head;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">                node-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;next = (l1 == <span class="literal">NULL</span> ? l2 : l1);</span><br><span class="line">        node = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> node;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><p>还可以通过递归实现，原理与上面相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        ListNode* node;</span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">            node = l1;</span><br><span class="line">            node-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = l1;</span><br><span class="line">            node-&gt;next = mergeTwoLists(l1, l2-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Merge two sorted linked list
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://songkc.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://songkc.github.io/tags/LeetCode/"/>
    
      <category term="链表" scheme="https://songkc.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 2. Add Two Numbers</title>
    <link href="https://songkc.github.io/2018/09/19/LeetCode-2-Add-Two-Numbers/"/>
    <id>https://songkc.github.io/2018/09/19/LeetCode-2-Add-Two-Numbers/</id>
    <published>2018-09-19T02:58:21.000Z</published>
    <updated>2019-03-29T18:28:35.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><ul><li>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</li><li>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: (<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">Output: <span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">  </span><br><span class="line">Explanation: <span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br></pre></td></tr></table></figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目挺简单的，就是通过链表实现大数加法，结果的每一位由三个值决定，两个是两个加数在这个数位上的值，剩下一个是上一位的进位，主要就是需要注意进位的实现，也没什么难度，可能还有需要注意的就是代码的逻辑需要简明清晰，不然很容易写的很冗长。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">0</span>, n2 = <span class="number">0</span>, tmp = <span class="number">0</span>, carry = <span class="number">0</span>;</span><br><span class="line">        ListNode *p1 = l1, *p2 = l2, *temp = <span class="literal">NULL</span>, *result = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="literal">NULL</span> || p2 != <span class="literal">NULL</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">            n1 = (p1 != <span class="literal">NULL</span>) ? p1-&gt;val : <span class="number">0</span>;</span><br><span class="line">            n2 = (p2 != <span class="literal">NULL</span>) ? p2-&gt;val : <span class="number">0</span>;</span><br><span class="line">            tmp = n1 + n2 + carry;</span><br><span class="line">            carry = tmp / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="literal">NULL</span>) result = <span class="keyword">new</span> ListNode(tmp % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">else</span> temp-&gt;next = <span class="keyword">new</span> ListNode(tmp % <span class="number">10</span>);</span><br><span class="line">            p1 = (p1 == <span class="literal">NULL</span>) ? p1 : p1-&gt;next;</span><br><span class="line">            p2 = (p2 == <span class="literal">NULL</span>) ? p2 : p2-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) temp = result;</span><br><span class="line">            <span class="keyword">else</span> temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><p>在 LeetCode 讨论区中发现了更简洁的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">    ListNode preHead(0), *p = &amp;preHead;</span><br><span class="line">    <span class="keyword">int</span> extra = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 || l2 || extra) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = (l1 ? l1-&gt;val : <span class="number">0</span>) + (l2 ? l2-&gt;val : <span class="number">0</span>) + extra;</span><br><span class="line">        extra = sum / <span class="number">10</span>;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        l1 = l1 ? l1-&gt;next : l1;</span><br><span class="line">        l2 = l2 ? l2-&gt;next : l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> preHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;You are given two &lt;strong&gt;no
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://songkc.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://songkc.github.io/tags/LeetCode/"/>
    
      <category term="链表" scheme="https://songkc.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 1. Two Sum</title>
    <link href="https://songkc.github.io/2018/09/12/LeetCode-1-Two-Sum/"/>
    <id>https://songkc.github.io/2018/09/12/LeetCode-1-Two-Sum/</id>
    <published>2018-09-12T14:20:34.000Z</published>
    <updated>2019-03-27T17:58:10.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span><br><span class="line"></span><br><span class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span><br></pre></td></tr></table></figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>一开始，我想到用 <strong>stl::map</strong> 来解决，数组元素值作为 <strong>map</strong> 的键，下标则是作为对应的值。将 <strong>target</strong> 减去当前元素值，看 <strong>map</strong> 中是否存在差值的键值，如果存在就说明找到了，不存在则将当前元素值和对应下标存入 <strong>map</strong> 中，以便后面的元素能对应。</p><p>但是，我发现如果出现目标是一个元素的两倍，那么输出的结果将是两次那个元素的下标。为了解决这个情况，我调整了一下语句的顺序，将对 <strong>map</strong> 赋值的语句放到查找后，这样就不会出现上面所说的问题了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.g</span></span><br><span class="line">intput: [<span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">7</span> <span class="number">10</span>], target = <span class="number">8</span></span><br><span class="line">output: [<span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; reflect;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (reflect.find(target - nums[i]) != reflect.end()) &#123;</span><br><span class="line">                result.push_back(reflect[target - nums[i]]);</span><br><span class="line">                result.push_back(reflect[nums[i]]);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            reflect[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Given an array of integers, return
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://songkc.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://songkc.github.io/tags/LeetCode/"/>
    
      <category term="数组" scheme="https://songkc.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="哈希表" scheme="https://songkc.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://songkc.github.io/2018/09/01/hello-world/"/>
    <id>https://songkc.github.io/2018/09/01/hello-world/</id>
    <published>2018-09-01T04:00:00.000Z</published>
    <updated>2019-03-26T18:43:17.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="https://songkc.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://songkc.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
